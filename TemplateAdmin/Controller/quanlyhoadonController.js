app.controller('quanlyhoadonController', function ($scope, $http, $q, $timeout) {
    // Bi·∫øn qu·∫£n l√Ω tr·∫°ng th√°i
    
    $scope.loading = true;
    $scope.showNotifications = false;
    $scope.selectedTab = 'unread';
    $scope.unreadOrders = [];
    $scope.readOrders = [];
    $scope.oldOrders = [];
    $scope.unreadNotifications = 0;
    $scope.notifications = [];
    $scope.invoices = [];
    $scope.filteredInvoices = [];
    $scope.selectedInvoice = null;
    $scope.dataspct = null;
    $scope.currentFilter = 'all';
    $scope.customers = {}; // Cache th√¥ng tin kh√°ch h√†ng
    $scope.paymentMethods = {}; // Cache ph∆∞∆°ng th·ª©c thanh to√°n

    // Ph√¢n trang
    $scope.currentPage = 1;
    $scope.itemsPerPage = 10;
    $scope.totalPages = 1;
    $scope.pagedInvoices = [];

    $scope.pages = [];

    // Th·ªëng k√™ s·ªë l∆∞·ª£ng theo tr·∫°ng th√°i
    $scope.counts = {
        all: 0,
        pending: 0,
        confirmed: 0,
        shipping: 0,
        success: 0,
        failed: 0,
    };

    // H√†m kh·ªüi t·∫°o
    $scope.init = function () {
        setInterval(loadUnreadOrders, 2000);
        $scope.loadInvoices();
    };

    const apiKey = "7b4f1e5c-0700-11f0-94b6-be01e07a48b5";
    const apiProvince = "https://online-gateway.ghn.vn/shiip/public-api/master-data/province";
    const apiDistrict = "https://online-gateway.ghn.vn/shiip/public-api/master-data/district";
    const apiWard = "https://online-gateway.ghn.vn/shiip/public-api/master-data/ward";
    
    let previousInvoices = [];

    // H√†m t·∫£i danh s√°ch h√≥a ƒë∆°n t·ª´ API
    $scope.loadInvoices = function () {
        $scope.loading = true;
    
        var promises = {
            invoices: $http.get('https://localhost:7196/api/Hoadons'),
            customers: $http.get('https://localhost:7196/api/Khachhangs'),
            paymentMethods: $http.get('https://localhost:7196/api/Phuongthucthanhtoans')
        };
    
        $q.all(promises).then(async function (responses) {
            // Cache kh√°ch h√†ng
            responses.customers.data.forEach(function (customer) {
                $scope.customers[customer.id] = customer;
            });
    
            // Cache ph∆∞∆°ng th·ª©c thanh to√°n
            responses.paymentMethods.data.forEach(function (method) {
                $scope.paymentMethods[method.id] = method;
            });
    
            const allInvoices = responses.invoices.data
                                .filter(invoice => 
                                    [0, 1, 2, 3, 4, 6].includes(invoice.trangthaidonhang) && invoice.trangthai == 0
                                )
                                .sort((a, b) => b.id - a.id); // S·∫Øp x·∫øp id gi·∫£m d·∫ßn

            // Duy·ªát t·ª´ng h√≥a ƒë∆°n ƒë·ªÉ x·ª≠ l√Ω ƒë·ªãa ch·ªâ v√† g√°n t√™n kh√°ch h√†ng, ph∆∞∆°ng th·ª©c
            for (const invoice of allInvoices) {
                // G√°n t√™n kh√°ch h√†ng
                invoice.tenkhachhang = invoice.idkh && $scope.customers[invoice.idkh]
                    ? $scope.customers[invoice.idkh].ten
                    : 'Kh√°ch v√£ng lai';
    
                // G√°n t√™n ph∆∞∆°ng th·ª©c thanh to√°n
                invoice.tenpttt = invoice.idpttt && $scope.paymentMethods[invoice.idpttt]
                    ? $scope.paymentMethods[invoice.idpttt].tenpttt
                    : 'Kh√¥ng x√°c ƒë·ªãnh';
    
                // X·ª≠ l√Ω ƒë·ªãa ch·ªâ ship
                if (invoice.diachiship) {
                    const parts = invoice.diachiship.split(' - ');
                    if (parts.length === 4) {
                        const [diachicuthe, phuongxaIdStr, quanhuyenIdStr, thanhphoIdStr] = parts;
                        const idphuongxa = parseInt(phuongxaIdStr);
                        const idquanhuyen = parseInt(quanhuyenIdStr);
                        const idthanhpho = parseInt(thanhphoIdStr);
    
                        // L∆∞u l·∫°i c√°c id ƒë·ªãa ch·ªâ
                        invoice.idphuongxa = idphuongxa;
                        invoice.idquanhuyen = idquanhuyen;
                        invoice.idthanhpho = idthanhpho;
                        invoice.diachicuthe = diachicuthe;
    
                        // G·ªçi API l·∫•y t√™n ƒë·ªãa ch·ªâ
                        const [phuongxa, quanhuyen, thanhpho] = await Promise.all([
                            getWardName(idquanhuyen, idphuongxa),
                            getDistrictName(idthanhpho, idquanhuyen),
                            getProvinceName(idthanhpho)
                        ]);
    
                        invoice.diachiship_display = `${diachicuthe || ''} - ${phuongxa} - ${quanhuyen} - ${thanhpho}`;
                    } else {
                        invoice.diachiship_display = "ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá";
                    }
                } else {
                    invoice.diachiship_display = "Kh√¥ng c√≥ ƒë·ªãa ch·ªâ";
                }
            }
    
            $scope.invoices = allInvoices;
            previousInvoices = angular.copy(allInvoices); // C·∫≠p nh·∫≠t b·∫£n l∆∞u               
            $scope.filterInvoices($scope.currentFilter);
            $scope.updatePagedInvoices();
            $scope.calculateCounts();
            $scope.loading = false;
            $scope.$apply(); // C·∫≠p nh·∫≠t l·∫°i view do c√≥ await
        }).catch(function (error) {
            console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
            $scope.loading = false;
        });
    };

    $scope.updatePagedInvoices = function () {
        var start = ($scope.currentPage - 1) * $scope.itemsPerPage;
        var end = start + $scope.itemsPerPage;
        $scope.pagedInvoices = $scope.filteredInvoices.slice(start, end);
    };    
    

    // H√†m l·∫•y t√™n t·ªânh/th√†nh ph·ªë
    async function getProvinceName(id) {
        try {
            const response = await fetch(apiProvince, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": apiKey // üîπ Th√™m Token v√†o headers
                },
                body: JSON.stringify({}) // Th√™m body n·∫øu c·∫ßn
            });

            const data = await response.json();
            if (data.code === 200) {
                const province = data.data.find(p => p.ProvinceID == id);
                return province ? province.NameExtension[1] : "Kh√¥ng x√°c ƒë·ªãnh";
            }
        } catch (error) {
            console.error("L·ªói l·∫•y t·ªânh/th√†nh ph·ªë:", error);
        }
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }

    // H√†m l·∫•y t√™n qu·∫≠n/huy·ªán
    async function getDistrictName(province_id, district_id) {
        try {
            const response = await fetch(apiDistrict, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": apiKey
                },
                body: JSON.stringify({ province_id: Number(province_id) }) // S·ª≠a l·∫°i bi·∫øn truy·ªÅn ƒë√∫ng
            });

            const data = await response.json();
            if (data.code === 200) {
                const district = data.data.find(d => d.DistrictID == district_id);
                return district ? district.DistrictName : "Kh√¥ng x√°c ƒë·ªãnh";
            }
        } catch (error) {
            console.error("L·ªói l·∫•y qu·∫≠n/huy·ªán:", error);
        }
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }

    // H√†m l·∫•y t√™n ph∆∞·ªùng/x√£
    async function getWardName(district_id, ward_id) {
        try {
            const response = await fetch(apiWard, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": apiKey
                },
                body: JSON.stringify({ district_id: Number(district_id) }) // S·ª≠a l·∫°i bi·∫øn truy·ªÅn ƒë√∫ng
            });

            const data = await response.json();
            if (data.code === 200) {
                const ward = data.data.find(w => w.WardCode == ward_id);
                return ward ? ward.WardName : "Kh√¥ng x√°c ƒë·ªãnh";
            }
        } catch (error) {
            console.error("L·ªói l·∫•y ph∆∞·ªùng/x√£:", error);
        }
        return "Kh√¥ng x√°c ƒë·ªãnh";
    };

    async function getAvailableServices(fromDistrictID, toDistrictID) {
        const apiURL = "https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/available-services";

        const headers = {
            "Token": apiKey, // Thay b·∫±ng Token GHN c·ªßa b·∫°n
            "Content-Type": "application/json"
        };

        const params = {
            shop_id: 3846066,
            from_district: fromDistrictID,
            to_district: toDistrictID
        };

        try {
            const response = await axios.post(apiURL, params, { headers });

            if (response.data.code === 200 && response.data.data.length > 0) {
                console.log("Danh s√°ch g√≥i d·ªãch v·ª•:", response.data.data);
                return response.data.data; // Tr·∫£ v·ªÅ danh s√°ch g√≥i d·ªãch v·ª• h·ª£p l·ªá
            } else {
                console.error("L·ªói API ho·∫∑c kh√¥ng c√≥ g√≥i d·ªãch v·ª• kh·∫£ d·ª•ng:", response.data.message);
                return null;
            }
        } catch (error) {
            console.error("L·ªói g·ªçi API:", error.response?.data || error.message);
            return null;
        }
    }

    async function taoDiaChiGiaoHang(id, idnv) {
        const shopId = 3846066;
        const apiToken = apiKey;
        let selectedService = null;
    
        const invoice = $scope.filteredInvoices.find(inv => inv.id === id);
        if (!invoice) {
            console.error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi id:", id);
            return null;
        }
    
        const toDistrictID = invoice.idquanhuyen;
        const toWardCode = invoice.idphuongxa;
    
        const fromDistrictID = 3440;
        const fromWardCode = "13006";
    
        try {
            const services = await getAvailableServices(fromDistrictID, toDistrictID);
            if (!services || services.length === 0) {
                console.error("Kh√¥ng c√≥ g√≥i d·ªãch v·ª• kh·∫£ d·ª•ng.");
                alert("Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• giao h√†ng ph√π h·ª£p.");
                return null;
            }
    
            selectedService = services[0];
    
            const leadtimeResponse = await axios.post(
                "https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/leadtime",
                {
                    from_district_id: fromDistrictID,
                    from_ward_code: String(fromWardCode),
                    to_district_id: toDistrictID,
                    to_ward_code: String(toWardCode),
                    service_id: selectedService.service_id
                },
                {
                    headers: {
                        "Content-Type": "application/json",
                        "Token": apiToken,
                        "ShopId": shopId
                    }
                }
            );
    
            if (leadtimeResponse.data.code === 200) {
                const expectedDeliveryTime = leadtimeResponse.data.data.leadtime;
                const readableDate = new Date(expectedDeliveryTime * 1000).toISOString().slice(0, 19);
    
                // üëâ G·ª≠i c·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ng√†y giao h√†ng
                $http.put(`https://localhost:7196/api/Hoadons/trangthaiNV1/${id}?trangthai=2&idnv=${idnv}&ngaygiaohang=${encodeURIComponent(readableDate)}`)
                    .then(res => {
                        var invoiceItem = $scope.invoices.find(i => i.id === id);
                        if (invoiceItem) {
                            invoiceItem.trangthaidonhang = 2;
                            invoiceItem.trangthaiStr = $scope.getStatusString(2);
                            invoiceItem.ngaygiaothucte = readableDate;
                        }

                        var filteredItem = $scope.filteredInvoices.find(i => i.id === id);
                        if (filteredItem) {
                            filteredItem.trangthaidonhang = 2;
                            filteredItem.trangthaiStr = $scope.getStatusString(2);
                            filteredItem.ngaygiaothucte = readableDate;
                        }

                        if ($scope.selectedInvoice && $scope.selectedInvoice.id === id) {
                            $scope.selectedInvoice.trangthaidonhang = 2;
                            $scope.selectedInvoice.trangthaiStr = $scope.getStatusString(2);
                            $scope.selectedInvoice.ngaygiaothucte = readableDate;
                        }

                        $scope.calculateCounts();
                        
                        Swal.fire('Th√†nh c√¥ng', `Chuy·ªÉn sang tr·∫°ng th√°i v·∫≠n chuy·ªÉn th√†nh c√¥ng!`, 'success');
                    })
                    .catch(err => {
                        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
                        alert("C·∫≠p nh·∫≠t ng√†y giao h√†ng th·∫•t b·∫°i!");
                    });
    
            } else {
                console.error("L·ªói khi l·∫•y leadtime:", leadtimeResponse.data.message);
                alert("Kh√¥ng th·ªÉ l·∫•y th·ªùi gian giao h√†ng d·ª± ki·∫øn.");
                return null;
            }
    
        } catch (error) {
            console.error("L·ªói trong qu√° tr√¨nh t·∫°o ƒë·ªãa ch·ªâ giao h√†ng:", error.response?.data || error.message);
            alert("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫°o ƒë·ªãa ch·ªâ giao h√†ng.");
            return null;
        }
    }         

    // H√†m t√≠nh to√°n s·ªë l∆∞·ª£ng h√≥a ƒë∆°n theo tr·∫°ng th√°i
    $scope.calculateCounts = function () {
        $scope.counts = {
            all: $scope.invoices.length,
            pending: $scope.invoices.filter(i => i.trangthaidonhang === 0).length,
            confirmed: $scope.invoices.filter(i => i.trangthaidonhang === 1).length,
            shipping: $scope.invoices.filter(i => i.trangthaidonhang === 2).length,
            success: $scope.invoices.filter(i => i.trangthaidonhang === 3).length,
            failed: $scope.invoices.filter(i => [4, 6].includes(i.trangthaidonhang)).length,
        };
    };

    $scope.filterInvoices = function (status) {
        $scope.currentFilter = status;
        $scope.currentPage = 1;
    
        if (status === 'all') {
            $scope.filteredInvoices = $scope.invoices;
        } 
        else if (Array.isArray(status)) {
            $scope.filteredInvoices = $scope.invoices.filter(function (invoice) {
                return status.includes(invoice.trangthaidonhang);
            });
        } 
        else {
            $scope.filteredInvoices = $scope.invoices.filter(function (invoice) {
                return invoice.trangthaidonhang === status;
            });
        }
    
        console.log("data ho√° ƒë∆°n:", $scope.filteredInvoices);
        $scope.updatePagination();
        $scope.updatePagedInvoices();
    };
    

    // H√†m c·∫≠p nh·∫≠t ph√¢n trang
    $scope.updatePagination = function () {
        $scope.totalPages = Math.ceil($scope.filteredInvoices.length / $scope.itemsPerPage);
        $scope.pages = [];

        for (var i = 1; i <= $scope.totalPages; i++) {
            $scope.pages.push(i);
        }

        // N·∫øu kh√¥ng c√≥ trang n√†o, th√™m trang 1
        if ($scope.totalPages === 0) {
            $scope.totalPages = 1;
            $scope.pages.push(1);
        }
    };

    // H√†m chuy·ªÉn trang
    $scope.changePage = function (page) {
        if (page >= 1 && page <= $scope.totalPages) {
            $scope.currentPage = page;
            $scope.updatePagedInvoices(); // Th√™m d√≤ng n√†y
        }
    };    

    // Th√™m h√†m n√†y v√†o controller c·ªßa b·∫°n
    $scope.modalInstance = null;

    $scope.openOrderDetail = function(order) {
        // Kh·ªüi t·∫°o modal n·∫øu ch∆∞a c√≥
        const modalElement = document.getElementById('orderDetailModal1');
        $scope.modalInstance = new bootstrap.Modal(modalElement);
        
        // X·ª≠ l√Ω d·ªØ li·ªáu
        $scope.viewInvoiceDetail(order);

        if ($scope.selectedTab === 'unread') {
            $scope.markSingleAsRead(order.id, event || {stopPropagation: angular.noop});
        }
        
        // M·ªü modal
        $scope.modalInstance.show();
    };

    $scope.closeModal = function() {
        if ($scope.modalInstance) {
            $scope.modalInstance.hide();
        } else {
            // Fallback n·∫øu kh√¥ng c√≥ modalInstance
            const modalElement = document.getElementById('orderDetailModal1');
            const modalInstance = bootstrap.Modal.getInstance(modalElement) || new bootstrap.Modal(modalElement);
            modalInstance.hide();
        }
        
        // Reset m·ªôt s·ªë tr·∫°ng th√°i n·∫øu c·∫ßn
        $scope.detailLoading = false;
        $scope.detailError = false;
    };

    // Trong controller
    $scope.$on('$destroy', function() {
        // ƒê√≥ng modal khi component b·ªã h·ªßy
        $scope.closeModal();
        $scope.modalInstance = null;
    });

    $scope.viewInvoiceDetail = function (invoice) {
        $scope.detailLoading = true;
        $scope.detailError = false;

        const foundInvoice = $scope.filteredInvoices.find(inv => inv.id === invoice.id);
    
        if (!foundInvoice) {
            console.error('Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n v·ªõi ID:', invoice);
            $scope.detailError = true;
            $scope.detailLoading = false;
            return;
        }

        // ‚úÖ Format ng√†y giao h√†ng th·ª±c t·∫ø
        foundInvoice.ngaygiaothucte = formatNgayGiaoThucTe(foundInvoice.ngaygiaothucte);

        // T·∫°o object m·ªõi ƒë·ªÉ trigger binding
        $scope.selectedInvoice = angular.copy(foundInvoice);
        $scope.selectedInvoice.chitiethoadon = [];

        $http.get(`https://localhost:7196/api/Hoadonchitiets/Hoa-don-chi-tiet-Theo-Ma-HD-${invoice.id}`)
            .then(function (response) {
                if (!response.data) throw new Error('D·ªØ li·ªáu tr·ªëng');

                // T·∫°o m·∫£ng m·ªõi ƒë·ªÉ trigger binding
                var newDetails = response.data.map(item => ({
                    id: item.id,
                    idhd: item.idhd,
                    tensanpham: item.tensp || 'Kh√¥ng r√µ',
                    anh: item.urlHinhanh ? `https://localhost:7196/picture/${item.urlHinhanh}` : 'https://i.pinimg.com/236x/1a/c8/1a/1ac81aed196c0ca212e6f307b9bdabfa.jpg',
                    dongia: parseFloat(item.giasp) || 0,
                    soluong: parseInt(item.soluong) || 0,
                    mau: item.mau || '-',
                    size: item.size || '-',
                    chatlieu: item.chatlieu || '-',
                    tong: (parseFloat(item.giasp) || 0) * (parseInt(item.soluong) || 0)
                }));

                // G√°n b·∫±ng angular.copy ƒë·ªÉ trigger binding
                $scope.selectedInvoice.chitiethoadon = angular.copy(newDetails);
                $scope.dataspct = angular.copy(newDetails);
                console.log("chi ti·∫øt selectedInvoice.ghichu:", $scope.selectedInvoice);
            })
            .catch(error => {
                console.error('L·ªói t·∫£i chi ti·∫øt:', error);
                $scope.detailError = true;
                $scope.selectedInvoice.chitiethoadon = [];
            })
            .finally(() => {
                $scope.detailLoading = false;
                if (!$scope.$$phase) $scope.$applyAsync();
            });
    };

    // H√†m ƒë·ªãnh d·∫°ng ng√†y n·∫øu ch∆∞a ƒë∆∞·ª£c format
    function formatNgayGiaoThucTe(input) {
        if (typeof input !== 'string' || input.includes('/')) {
            return input; // ƒê√£ format r·ªìi ho·∫∑c kh√¥ng h·ª£p l·ªá ‚Üí gi·ªØ nguy√™n
        }

        const date = new Date(input);
        if (isNaN(date.getTime())) return 'Kh√¥ng c√≥ d·ªØ li·ªáu';

        return ('0' + date.getDate()).slice(-2) + '/' +
            ('0' + (date.getMonth() + 1)).slice(-2) + '/' +
            date.getFullYear() + ' ' +
            ('0' + date.getHours()).slice(-2) + ':' +
            ('0' + date.getMinutes()).slice(-2);
    }

    $scope.retryLoadDetail = function () {
        if ($scope.selectedInvoice) {
            $scope.viewInvoiceDetail($scope.selectedInvoice);
        }
    };

    $scope.updateInvoicestatus = function (invoiceId, newStatus) {
        const userInfoString = localStorage.getItem("userInfo1");
        const userInfo = JSON.parse(userInfoString);
        var statusMessage = "";
        switch (newStatus) {
            case 1: statusMessage = "X√°c nh·∫≠n ƒë∆°n h√†ng"; break;
            case 2: statusMessage = "Chuy·ªÉn sang tr·∫°ng th√°i v·∫≠n chuy·ªÉn"; break;
            case 3: statusMessage = "X√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng"; break;
            case 4: statusMessage = "H·ªßy ƒë∆°n h√†ng"; break;
            case 5: statusMessage = "ƒê√°nh d·∫•u ƒë∆°n h√†ng tr·∫£ h√†ng"; break;
            case 6: statusMessage = "ƒê∆°n h√†ng giao th·∫•t b·∫°i"; break;
        }
    
        Swal.fire({
            title: 'X√°c nh·∫≠n',
            text: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${statusMessage.toLowerCase()}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'ƒê·ªìng √Ω',
            cancelButtonText: 'H·ªßy b·ªè'
        }).then((result) => {
            if (!result.isConfirmed) {
                return;
            }
    
            // N·∫øu l√† tr·∫°ng th√°i chuy·ªÉn v·∫≠n
            if (newStatus == 2) {
                return taoDiaChiGiaoHang(invoiceId, userInfo.id);
            }

            if (newStatus == 4) {
                Swal.fire({
                    title: 'Nh·∫≠p l√Ω do hu·ª∑ ƒë∆°n h√†ng',
                    input: 'textarea',
                    inputLabel: 'L√Ω do hu·ª∑',
                    inputPlaceholder: 'Nh·∫≠p l√Ω do hu·ª∑ t·∫°i ƒë√¢y...',
                    inputAttributes: {
                        'aria-label': 'Nh·∫≠p l√Ω do hu·ª∑ t·∫°i ƒë√¢y'
                    },
                    showCancelButton: true,
                    confirmButtonText: 'G·ª≠i l√Ω do',
                    cancelButtonText: 'H·ªßy b·ªè'
                }).then((result) => {
                    if (result.isConfirmed && result.value && result.value.trim() !== "") {
                        const lyDo = result.value.trim();
            
                        // G·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i v√† l√Ω do
                        $http.put(`https://localhost:7196/api/Hoadons/trangthaiNVHuy/${invoiceId}?trangthai=${newStatus}&idnv=${userInfo.id}&ghichu=${encodeURIComponent(lyDo)}`)
                            .then(function (response) {
                                if (response.status === 200) {
                                    updateLocalInvoice(invoiceId, newStatus, lyDo);
                                    Swal.fire('Th√†nh c√¥ng', 'Hu·ª∑ ƒë∆°n h√†ng th√†nh c√¥ng!', 'success');
                                } else {
                                    Swal.fire('L·ªói', 'C·∫≠p nh·∫≠t tr·∫°ng th√°i kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
                                }
                            })
                            .catch(function (error) {
                                console.error('L·ªói khi hu·ª∑ ƒë∆°n h√†ng:', error);
                                var errorMsg = error.data && error.data.message
                                    ? error.data.message
                                    : 'C√≥ l·ªói x·∫£y ra khi hu·ª∑ ƒë∆°n h√†ng!';
                                Swal.fire('L·ªói', errorMsg, 'error');
                            });
            
                    } else if (result.dismiss !== Swal.DismissReason.cancel) {
                        Swal.fire('Th√¥ng b√°o', 'B·∫°n c·∫ßn nh·∫≠p l√Ω do ƒë·ªÉ hu·ª∑ ƒë∆°n h√†ng.', 'warning');
                    }
                });
            
                return; // D·ª´ng h√†m t·∫°i ƒë√¢y
            }
            
    
            if (newStatus == 3) {
                const vietnamDateString = getVietnamTimeString();
    
                return $http.put(`https://localhost:7196/api/Hoadons/trangthaiNV1/${invoiceId}?trangthai=${newStatus}&idnv=${userInfo.id}&ngaygiaohang=${encodeURIComponent(vietnamDateString)}`)
                    .then(function (response) {
                        if (response.status === 200) {
                            updateLocalInvoice(invoiceId, newStatus, vietnamDateString);
                            Swal.fire('Th√†nh c√¥ng', `${statusMessage} th√†nh c√¥ng!`, 'success');
                        } else {
                            Swal.fire('L·ªói', 'C·∫≠p nh·∫≠t tr·∫°ng th√°i kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
                        }
                    })
                    .catch(function (error) {
                        console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
                        var errorMsg = error.data && error.data.message
                            ? error.data.message
                            : `C√≥ l·ªói x·∫£y ra khi ${statusMessage.toLowerCase()}!`;
                        Swal.fire('L·ªói', errorMsg, 'error');
                    });
            } else {
                // C√°c tr·∫°ng th√°i c√≤n l·∫°i
                $http.put(`https://localhost:7196/api/Hoadons/trangthaiNV/${invoiceId}?trangthai=${newStatus}&idnv=${userInfo.id}`)
                    .then(function (response) {
                        if (response.status === 200) {
                            updateLocalInvoice(invoiceId, newStatus);
                            Swal.fire('Th√†nh c√¥ng', `${statusMessage} th√†nh c√¥ng!`, 'success');
                        } else {
                            Swal.fire('L·ªói', 'C·∫≠p nh·∫≠t tr·∫°ng th√°i kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
                        }
                    })
                    .catch(function (error) {
                        console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
                        var errorMsg = error.data && error.data.message
                            ? error.data.message
                            : `C√≥ l·ªói x·∫£y ra khi ${statusMessage.toLowerCase()}!`;
                        Swal.fire('L·ªói', errorMsg, 'error');
                    });
            }
        });
    };
       

    // H√†m l·∫•y th·ªùi gian hi·ªán t·∫°i theo gi·ªù Vi·ªát Nam ƒë·ªãnh d·∫°ng ISO (yyyy-MM-ddTHH:mm:ss)
    function getVietnamTimeString() {
        const now = new Date();
    
        // T·∫°o ƒë·ªëi t∆∞·ª£ng ng√†y theo gi·ªù Vi·ªát Nam
        const vietnamTime = new Date(now.toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" }));
    
        // Format yyyy-MM-ddTHH:mm:ss
        const year = vietnamTime.getFullYear();
        const month = String(vietnamTime.getMonth() + 1).padStart(2, '0');
        const day = String(vietnamTime.getDate()).padStart(2, '0');
        const hours = String(vietnamTime.getHours()).padStart(2, '0');
        const minutes = String(vietnamTime.getMinutes()).padStart(2, '0');
        const seconds = String(vietnamTime.getSeconds()).padStart(2, '0');
    
        return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
    }    
   

    function updateLocalInvoice(invoiceId, newStatus, ngaygiaohang = null) {
        const newStatusStr = $scope.getStatusString(newStatus);
    
        var invoice = $scope.invoices.find(i => i.id === invoiceId);
        if (invoice) {
            invoice.trangthaidonhang = newStatus;
            invoice.trangthaiStr = newStatusStr;
            if (ngaygiaohang) invoice.ngaygiaothucte = ngaygiaohang;
        }
    
        var filteredInvoice = $scope.filteredInvoices.find(i => i.id === invoiceId);
        if (filteredInvoice) {
            filteredInvoice.trangthaidonhang = newStatus;
            filteredInvoice.trangthaiStr = newStatusStr;
            if (ngaygiaohang) filteredInvoice.ngaygiaothucte = ngaygiaohang;
        }
    
        if ($scope.selectedInvoice && $scope.selectedInvoice.id === invoiceId) {
            $scope.selectedInvoice.trangthaidonhang = newStatus;
            $scope.selectedInvoice.trangthaiStr = newStatusStr;
            if (ngaygiaohang) $scope.selectedInvoice.ngaygiaothucte = ngaygiaohang;
        }
    
        $scope.calculateCounts();
    }    

    // H√†m chuy·ªÉn ƒë·ªïi m√£ tr·∫°ng th√°i th√†nh chu·ªói
    $scope.getStatusString = function (status) {
        switch (status) {
            case 0: return 'Ch·ªù x√°c nh·∫≠n';
            case 1: return 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n';
            case 2: return 'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao';
            case 3: return 'ƒê∆°n h√†ng th√†nh c√¥ng';
            case 4: return 'ƒê∆°n h√†ng ƒë√£ hu·ª∑';
            case 6: return 'ƒê∆°n h√†ng giao th·∫•t b·∫°i';
            default: return 'Kh√¥ng x√°c ƒë·ªãnh';
        }
    };

    $scope.selectTab = function (tabName) {
        $scope.selectedTab = tabName;
        loadTabData(tabName);
    };

    function loadTabData(tabName) {
        switch (tabName) {
            case 'unread':
                loadUnreadOrders();
                break;
            case 'read':
                loadReadOrders();
                break;
            case 'old':
                loadOldOrders();
                break;
        }
    }

    // H√†m t·∫£i ƒë∆°n ch∆∞a ƒë·ªçc
    let previousUnreadCount = 0; // l∆∞u s·ªë l∆∞·ª£ng c≈©

    function loadUnreadOrders() {
        $http.get('https://localhost:7196/api/Hoadons/unread-orders')
            .then(function (response) {
                const currentUnreadOrders = response.data;
                const currentCount = currentUnreadOrders.length;
    
                if (currentCount !== previousUnreadCount) {
                    // N·∫øu thay ƒë·ªïi v·ªÅ s·ªë l∆∞·ª£ng -> load l·∫°i danh s√°ch ƒë·∫ßy ƒë·ªß
                    $scope.loadInvoices();
                    previousUnreadCount = currentCount;
                } else {
                    // N·∫øu kh√¥ng thay ƒë·ªïi v·ªÅ s·ªë l∆∞·ª£ng -> v·∫´n ki·ªÉm tra n·ªôi dung chi ti·∫øt
                    $scope.checkInvoiceChanges();
                }
    
                $scope.unreadOrders = currentUnreadOrders;
                $scope.unreadNotifications = currentCount;
            })
            .catch(function (error) {
                console.error("L·ªói khi t·∫£i ƒë∆°n ch∆∞a ƒë·ªçc:", error);
            });
    }
    
    $scope.checkInvoiceChanges = function () {
        $http.get('https://localhost:7196/api/Hoadons').then(function (response) {
            const newInvoices = response.data
                .filter(invoice => [0, 1, 2, 3, 4, 6].includes(invoice.trangthaidonhang) && invoice.trangthai == 0)
                .sort((a, b) => b.id - a.id);
    
            if (!isSameInvoices(previousInvoices, newInvoices)) {
                // N·∫øu d·ªØ li·ªáu kh√°c nhau th√¨ g·ªçi loadInvoices ƒë·ªÉ x·ª≠ l√Ω chi ti·∫øt h∆°n
                $scope.loadInvoices();
            } else {
                console.log("Kh√¥ng c√≥ thay ƒë·ªïi v·ªÅ chi ti·∫øt ho√° ƒë∆°n.");
            }
        }).catch(function (error) {
            console.error("L·ªói khi ki·ªÉm tra ho√° ƒë∆°n:", error);
        });
    };   

    function isSameInvoices(oldList, newList) {
        if (oldList.length !== newList.length) return false;
    
        for (let i = 0; i < newList.length; i++) {
            const oldInv = oldList[i];
            const newInv = newList[i];
    
            if (oldInv.id !== newInv.id ||
                oldInv.trangthai !== newInv.trangthai ||
                oldInv.trangthaidonhang !== newInv.trangthaidonhang ||
                oldInv.updatedAt !== newInv.updatedAt) {
                return false;
            }
        }
        return true;
    }    

    // H√†m t·∫£i ƒë∆°n ƒë√£ ƒë·ªçc
    function loadReadOrders() {
        $http.get('https://localhost:7196/api/Hoadons/read-orders')
            .then(function (response) {
                $scope.readOrders = response.data;
            });
    }

    // H√†m t·∫£i ƒë∆°n c≈©
    function loadOldOrders() {
        $http.get('https://localhost:7196/api/Hoadons/old-orders')
            .then(function (response) {
                $scope.oldOrders = response.data;
            });
    }

    $scope.getUnreadOrderIds = function () {
        return $scope.unreadOrders.map(function (o) {
            return o.id;
        });
    };

    // H√†m ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc cho 1 ƒë∆°n h√†ng
    $scope.markSingleAsRead = function (orderId, event) {
        // NgƒÉn s·ª± ki·ªán click lan ra ph·∫ßn t·ª≠ cha
        event.stopPropagation();

        $http.post('https://localhost:7196/api/Hoadons/mark-as-read', [orderId])
            .then(function () {
                var index = $scope.unreadOrders.findIndex(o => o.id === orderId);
                if (index !== -1) {
                    var order = $scope.unreadOrders[index];
                    $scope.unreadOrders.splice(index, 1);
                    $scope.readOrders.unshift(order);
                    $scope.unreadNotifications = $scope.unreadOrders.length;
                }
            });
    };

    $scope.markAsRead = function (orderIds) {
        // L·∫•y danh s√°ch m√£ h√≥a ƒë∆°n t∆∞∆°ng ·ª©ng
        const selectedOrders = $scope.unreadOrders.filter(o => orderIds.includes(o.id));
        const maHoaDonList = selectedOrders.map(o => o.maHoaDon || `#${o.id}`); // fallback n·∫øu kh√¥ng c√≥ m√£
    
        Swal.fire({
            title: 'X√°c nh·∫≠n ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc',
            html: `
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√°nh d·∫•u c√°c h√≥a ƒë∆°n sau l√† ƒë√£ ƒë·ªçc?</p>
                <ul style="text-align: left; padding-left: 20px;">
                    ${maHoaDonList.map(ma => `<li>${ma}</li>`).join('')}
                </ul>
            `,
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'ƒê·ªìng √Ω',
            cancelButtonText: 'H·ªßy b·ªè'
        }).then((result) => {
            if (!result.isConfirmed) return;
    
            $http.post('https://localhost:7196/api/Hoadons/mark-as-read', orderIds)
                .then(function () {
                    if (Array.isArray(orderIds)) {
                        orderIds.forEach(function (id) {
                            var index = $scope.unreadOrders.findIndex(o => o.id === id);
                            if (index !== -1) {
                                var order = $scope.unreadOrders[index];
                                $scope.unreadOrders.splice(index, 1);
                                $scope.readOrders.unshift(order);
                            }
                        });
                        $scope.unreadNotifications = $scope.unreadOrders.length;
    
                        Swal.fire('Th√†nh c√¥ng', 'ƒê√£ ƒë√°nh d·∫•u c√°c h√≥a ƒë∆°n l√† ƒë√£ ƒë·ªçc.', 'success');
                    }
                })
                .catch(function (error) {
                    console.error('L·ªói khi ƒë√°nh d·∫•u h√≥a ƒë∆°n:', error);
                    Swal.fire('L·ªói', 'Kh√¥ng th·ªÉ ƒë√°nh d·∫•u h√≥a ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
                });
        });
    };    


    $scope.loadUnreadOrdersAndShowModal = function () {
        // Lu√¥n ƒë·∫∑t l·∫°i tab v·ªÅ 'unread' tr∆∞·ªõc khi m·ªü modal
        $scope.selectedTab = 'unread';
    
        $http.get('https://localhost:7196/api/Hoadons/unread-orders')
            .then(function (response) {
                $scope.unreadOrders = response.data;
                $scope.unreadNotifications = $scope.unreadOrders.length;
    
                // M·ªü modal
                $('#notificationModal').modal('show');
            }).catch(function (error) {
                console.error("L·ªói khi t·∫£i ƒë∆°n ch∆∞a ƒë·ªçc:", error);
            });
    };    

    // Kh·ªüi t·∫°o bi·∫øn
    $scope.searchTerm = '';
    $scope.searchType = 'id';
    $scope.filterDate = '';
    $scope.originalInvoices = []; // L∆∞u d·ªØ li·ªáu g·ªëc
    $scope.filteredData = []; // L∆∞u d·ªØ li·ªáu ƒë√£ l·ªçc

    // L∆∞u tr·ªØ d·ªØ li·ªáu g·ªëc khi nh·∫≠n d·ªØ li·ªáu m·ªõi
    $scope.$watch('invoices', function(newVal) {
        if (newVal) {
            $scope.originalInvoices = angular.copy(newVal);
            $scope.resetFilteredData();
        }
    }, true);

    // Reset d·ªØ li·ªáu ƒë√£ l·ªçc v·ªÅ tr·∫°ng th√°i g·ªëc
    $scope.resetFilteredData = function() {
        $scope.filteredData = angular.copy($scope.originalInvoices);
        $scope.filteredInvoices = angular.copy($scope.filteredData);
    };

    // H√†m chuy·ªÉn tab v√† x·ª≠ l√Ω d·ªØ li·ªáu
    $scope.prepareSearch = function() {
        // Reset v·ªÅ d·ªØ li·ªáu g·ªëc
        $scope.filteredData = angular.copy($scope.originalInvoices);
    
        // Chuy·ªÉn tab "All" tr∆∞·ªõc
        var allTab = document.getElementById('all-tab');
        if (allTab) {
            allTab.click();
    
            // ƒê·ª£i giao di·ªán chuy·ªÉn tab xong (~100ms), r·ªìi m·ªõi l·ªçc
            setTimeout(function() {
                $scope.applySearch();
                $scope.$apply(); // ƒê·∫£m b·∫£o AngularJS c·∫≠p nh·∫≠t view
            }, 100);
        } else {
            // N·∫øu kh√¥ng t√¨m th·∫•y tab th√¨ l·ªçc lu√¥n
            $scope.applySearch();
        }
    };    

    // H√†m t√¨m ki·∫øm ch√≠nh
    $scope.applySearch = function() {
        // B·∫Øt ƒë·∫ßu t·ª´ d·ªØ li·ªáu g·ªëc ƒë√£ reset
        let filtered = angular.copy($scope.filteredData);
        
        // √Åp d·ª•ng t√¨m ki·∫øm
        if ($scope.searchTerm) {
            const term = $scope.searchTerm.toLowerCase();
            filtered = filtered.filter(invoice => {
                switch ($scope.searchType) {
                    case 'id': 
                        return invoice.id && invoice.id.toString().includes(term);
                    case 'tenkhachhang': 
                        return invoice.tenkhachhang && invoice.tenkhachhang.toLowerCase().includes(term);
                    case 'sdt': 
                        return invoice.sdt && invoice.sdt.includes(term);
                    default: 
                        return true;
                }
            });
        }
        
        // √Åp d·ª•ng b·ªô l·ªçc ng√†y
        if ($scope.filterDate) {
            const selectedDate = new Date($scope.filterDate);
            filtered = filtered.filter(invoice => {
                if (!invoice.thoigiandathang) return false;
                const invoiceDate = new Date(invoice.thoigiandathang);
                return invoiceDate.toDateString() === selectedDate.toDateString();
            });
        }
        
        // N·∫øu kh√¥ng c√≥ ƒëi·ªÅu ki·ªán t√¨m ki·∫øm/l·ªçc, hi·ªÉn th·ªã t·∫•t c·∫£
        if (!$scope.searchTerm && !$scope.filterDate) {
            filtered = angular.copy($scope.originalInvoices);
        }
        
        // C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªÉn th·ªã
        $scope.filteredInvoices = filtered;
        $scope.changePage(1);
    };

    // H√†m g·ªçi t·ª´ √¥ t√¨m ki·∫øm
    $scope.onSearch = function() {
        $scope.prepareSearch();
    };

    // H√†m g·ªçi t·ª´ b·ªô l·ªçc ng√†y
    $scope.onDateFilter = function() {
        $scope.prepareSearch();
    };
    
    // Kh·ªüi t·∫°o ·ª©ng d·ª•ng
    $scope.init();
    $scope.giaohangthatbai = function (id) {

        Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng?",
            text: "Sau khi h·ªßy, b·∫°n kh√¥ng th·ªÉ kh√¥i ph·ª•c l·∫°i ƒë∆°n h√†ng!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "H·ªßy ƒë∆°n h√†ng",
            cancelButtonText: "Quay l·∫°i"
        }).then((result) => {
            if (result.isConfirmed) {
                let api = "https://localhost:7196/api/Hoadons/" + id;

                // ‚úÖ G·ªçi API GET tr∆∞·ªõc
                $http.get(api)
                    .then(function (response) {
                        let dataHoaDon = response.data;

                        // ‚úÖ Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
                        let data = {
                            id: dataHoaDon.id,
                            idnv: dataHoaDon.idnv,
                            idkh: dataHoaDon.idkh,
                            trangthaithanhtoan: dataHoaDon.trangthaithanhtoan,
                            trangthaidonhang: dataHoaDon.trangthaidonhang,
                            thoigiandathang: dataHoaDon.thoigiandathang,
                            diachiship: dataHoaDon.diachiship,
                            ngaygiaothucte: dataHoaDon.ngaygiaothucte,
                            tongtiencantra: dataHoaDon.tongtiencantra,
                            tongtiensanpham: dataHoaDon.tongtiensanpham,
                            sdt: dataHoaDon.sdt,
                            tonggiamgia: dataHoaDon.tonggiamgia,
                            idgg: dataHoaDon.idgg,
                            trangthaidonhang: 4, // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i
                            phivanchuyen: dataHoaDon.phivanchuyen,
                            idpttt: dataHoaDon.idpttt,
                            ghichu: "Hu·ª∑ ƒë∆°n h√†ng v·ªõi l√Ω do: Giao h√†ng th·∫•t b·∫°i"
                        };
                        console.log(data);
                        // ‚úÖ G·ªçi API PUT ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
                        return $http.put(api, data);
                    })
                    .then(function () {
                        // ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                        Swal.fire({
                            icon: "success",
                            title: "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng!",
                            text: "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy.",
                            timer: 2000,
                            showConfirmButton: false
                        });

                        // ‚úÖ Reload l·∫°i trang
                        setTimeout(() => {
                            location.reload();
                            window.scroll(0, 0);
                        }, 2000);
                    })
                    .catch(function (error) {
                        console.error("L·ªói khi h·ªßy ƒë∆°n h√†ng:", error);

                        Swal.fire({
                            icon: "error",
                            title: "H·ªßy ƒë∆°n kh√¥ng th√†nh c√¥ng!",
                            text: "Vui l√≤ng th·ª≠ l·∫°i sau.",
                        });
                    });
            }
        });
    };
});
