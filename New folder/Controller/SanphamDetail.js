
app.controller('SanphamDetail', function () {
    const apiSPCTUrl = "https://localhost:7196/api/Sanphamchitiets";
    const apiSPUrl = "https://localhost:7196/api/Sanphams";
    const apiSize = "https://localhost:7196/api/size";
    const apiChatlieu = "https://localhost:7196/api/ChatLieu";
    const apiMau = "https://localhost:7196/api/color";
    const apiThuonghieu = "https://localhost:7196/api/thuonghieu";
    const sanPhamId = 1;
    let dataspct = []; // S·ª≠a Set th√†nh m·∫£ng

    async function fetchSanPhamChiTiet() {
        try {
            if (!sanPhamId) {
                console.error("id s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá");
                return [];
            }

            const response = await fetch(`${apiSPUrl}/GetALLSanPham/${sanPhamId}`);
            if (!response.ok) {
                throw new Error(`L·ªói API s·∫£n ph·∫©m chi ti·∫øt: ${response.status}`);
            }

            const data = await response.json();

            console.log(data);
            return Array.isArray(data) ? data : [data];


        } catch (error) {
            console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m chi ti·∫øt:", error);
            return [];
        }
    }

    async function fetchDataSanPhamChiTiet() {
        try {
            const danhSachSPCT = await fetchSanPhamChiTiet();
            if (!danhSachSPCT.length) return;
    
            const container = document.querySelector("#anhsanpham .thumbnail-container");
            const mainImage = document.querySelector("#main-product-image");
    
            let allImages = [];
            let colorIds = new Set();
            let chatlieuIds = new Set();
            let sizeIds = new Set();
    
            // L·∫∑p qua t·∫•t c·∫£ s·∫£n ph·∫©m chi ti·∫øt ƒë·ªÉ l·∫•y ·∫£nh
            for (const spct of danhSachSPCT) {
                var thuonghieu = await fetchThuonghieu(spct.idThuongHieu);
                document.querySelector(".product-title").textContent = spct.tensp;
                document.querySelector("#product-status").textContent = convertStatus(spct.trangthai);
                
                if (spct.giasale != null) {
                    document.querySelector("#price-current").textContent = spct.giasale;
                    document.querySelector("#price-original").textContent = spct.giaban;
                } else {
                    document.querySelector("#price-current").textContent = spct.giaban;
                    document.querySelector("#price-original").style.display = "none";
                }
    
                document.querySelector("#product-category").textContent = thuonghieu.tenthuonghieu;
    
                for (const anhspct of spct.sanphamchitiets) {
                    // X·ª≠ l√Ω h√¨nh ·∫£nh
                    const response = await fetch(`${apiSPCTUrl}/GetImageById/${anhspct.id}`);
                    if (!response.ok) continue;
                    
                    const blob = await response.blob();
                    const imageUrl = URL.createObjectURL(blob);
                    allImages.push(imageUrl);
    
                    // L·∫•y t·∫•t c·∫£ color, ch·∫•t li·ªáu, size
                    colorIds.add(anhspct.idMau);
                    chatlieuIds.add(anhspct.idChatLieu);
                    sizeIds.add(anhspct.idSize);
                }
    
                // Th√™m t·∫•t c·∫£ s·∫£n ph·∫©m chi ti·∫øt v√†o danh s√°ch chung
                dataspct.push(...spct.sanphamchitiets);
            }
    
            if (!allImages.length) return;
    
            // Hi·ªÉn th·ªã ·∫£nh v√†o thumbnail-container
            container.innerHTML = allImages.map((imgUrl, index) =>
                `<img src="${imgUrl}" class="thumbnail-img ${index === 0 ? 'active' : ''}" 
                    data-img-url="${imgUrl}" alt="Thumbnail ${index + 1}">`
            ).join('');
    
            // Hi·ªÉn th·ªã ·∫£nh ƒë·∫ßu ti√™n v√†o position-relative
            mainImage.src = allImages[0];
    
            // Th√™m s·ª± ki·ªán click v√†o t·ª´ng thumbnail
            document.querySelectorAll(".thumbnail-img").forEach(thumbnail => {
                thumbnail.addEventListener("click", function () {
                    changeMainImage(this.dataset.imgUrl, this);
                });
            });
    
            await fetchAndDisplayColors([...colorIds]);
            await fetchAndDisplayChatlieus([...chatlieuIds]);
            await fetchAndDisplaySize([...sizeIds]);
    
            console.log("D·ªØ li·ªáu s·∫£n ph·∫©m chi ti·∫øt:", dataspct); // Debug ki·ªÉm tra d·ªØ li·ªáu l·∫•y ra
    
        } catch (error) {
            console.error("L·ªói khi l·∫•y ·∫£nh s·∫£n ph·∫©m chi ti·∫øt:", error);
        }
    }
    


    // H√†m thay ƒë·ªïi ·∫£nh ch√≠nh khi click v√†o thumbnail
    function changeMainImage(imageUrl, clickedThumbnail) {
        const mainImage = document.querySelector("#main-product-image");
        if (mainImage) {
            mainImage.src = imageUrl;
        }

        // Lo·∫°i b·ªè class "active" kh·ªèi t·∫•t c·∫£ ·∫£nh thumbnail
        document.querySelectorAll(".thumbnail-img").forEach(img => img.classList.remove("active"));

        // Th√™m class "active" cho ·∫£nh ƒëang ch·ªçn
        clickedThumbnail.classList.add("active");
    }

    function updateSizeOptions(validSizeIds) {
        const sizeIdSet = new Set(validSizeIds); // Gi·ªØ nguy√™n ki·ªÉu int
    
        document.querySelectorAll(".size-option").forEach(button => {
            const rawSizeId = button.getAttribute("data-size"); // L·∫•y gi√° tr·ªã th√¥
            console.log("üìå rawSizeId:", rawSizeId); // Ki·ªÉm tra gi√° tr·ªã th·ª±c t·∫ø
        
            // Ch·ªâ chuy·ªÉn v·ªÅ int n·∫øu rawSizeId h·ª£p l·ªá
            const sizeId = rawSizeId ? parseInt(rawSizeId, 10) : NaN;
        
            console.log("üîç sizeId sau khi parse:", sizeId);
        
            if (!isNaN(sizeId) && sizeIdSet.has(sizeId)) {
                button.style.display = "inline-block";  // Hi·ªÉn th·ªã n·∫øu h·ª£p l·ªá
            } else {
                button.style.display = "none";  // ·∫®n n·∫øu kh√¥ng h·ª£p l·ªá
            }
        });
        
    }
    
    function updateChatlieuOptions(validChatlieuIds) {
        const chatlieuIdSet = new Set(validChatlieuIds); // Gi·ªØ nguy√™n ki·ªÉu int
    
        document.querySelectorAll(".chatlieu-option").forEach(button => {
            const chatlieuId = parseInt(button.getAttribute("data-chatlieu")); // Chuy·ªÉn v·ªÅ int ƒë·ªÉ so s√°nh
            if (chatlieuIdSet.has(chatlieuId)) {
                button.style.display = "inline-block";  // Hi·ªÉn th·ªã n·∫øu h·ª£p l·ªá
            } else {
                button.style.display = "none";  // ·∫®n n·∫øu kh√¥ng h·ª£p l·ªá
            }
        });
    }
    
    function filterAttributesByColor(selectedColorId) {
        console.log(dataspct);
        // L·ªçc danh s√°ch s·∫£n ph·∫©m chi ti·∫øt theo m√†u s·∫Øc
        const filteredSPCTs = dataspct.filter(anhspct => anhspct.idMau == selectedColorId);
    
        // L·∫•y danh s√°ch k√≠ch th∆∞·ªõc & ch·∫•t li·ªáu h·ª£p l·ªá
        const validSizeIds = new Set(filteredSPCTs.map(anhspct => anhspct.idSize));
        const validChatlieuIds = new Set(filteredSPCTs.map(anhspct => anhspct.idChatLieu));
    
        // C·∫≠p nh·∫≠t danh s√°ch k√≠ch th∆∞·ªõc & ch·∫•t li·ªáu tr√™n giao di·ªán
        updateSizeOptions([...validSizeIds]);
        updateChatlieuOptions([...validChatlieuIds]);
    }    
    

    // üü¢ X·ª≠ l√Ω ch·ªçn m√†u, ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt m√†u duy nh·∫•t
    function selectColor(selectedButton) {
        // X√≥a tr·∫°ng th√°i active c·ªßa t·∫•t c·∫£ m√†u
        document.querySelectorAll(".color-option").forEach(button => {
            button.classList.remove("active");
            button.querySelector(".color-check").style.display = "none";
        });
    
        // ƒê√°nh d·∫•u m√†u ƒë∆∞·ª£c ch·ªçn
        selectedButton.classList.add("active");
        selectedButton.querySelector(".color-check").style.display = "block";
    
        // L·ªçc thu·ªôc t√≠nh d·ª±a tr√™n m√†u ƒë√£ ch·ªçn
        const selectedColorId = selectedButton.getAttribute("data-color");
        filterAttributesByColor(selectedColorId);
    }
    

    // üü¢ H√†m hi·ªÉn th·ªã m√†u s·∫Øc t·ª´ API l√™n giao di·ªán
    async function fetchAndDisplayColors(colorIds) {
        try {
            const colorContainer = document.querySelector(".color-options");
            colorContainer.innerHTML = ""; // X√≥a m√†u c≈©

            for (const idMau of colorIds) {
                const response = await fetch(`${apiMau}/${idMau}`);
                if (!response.ok) continue;

                const colorData = await response.json();
                const colorCode = colorData.mamau;

                // T·∫°o n√∫t m√†u v·ªõi d·∫•u t√≠ch ‚úî
                const colorButton = document.createElement("button");
                colorButton.classList.add("btn", "btn-outline-secondary", "me-2", "color-option");
                colorButton.style.backgroundColor = colorCode;
                colorButton.style.color = "#fff";
                colorButton.style.padding = "18px";
                colorButton.setAttribute("data-color", idMau);
                colorButton.innerHTML = `
                     <span class="color-check" style="display: none; 
                        position: absolute; 
                        top: 50%; left: 50%; 
                        transform: translate(-50%, -50%);
                        font-size: 18px; font-weight: bold;">‚úî</span>
                `;

                // G√°n s·ª± ki·ªán click
                colorButton.addEventListener("click", function () {
                    selectColor(this);
                });

                // Th√™m v√†o giao di·ªán
                colorContainer.appendChild(colorButton);
            }
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch m√†u:", error);
        }
    }

    async function fetchAndDisplayChatlieus(chatlieuIds) {
        try {
            const chatlieuContainer = document.querySelector(".chatlieu-options");
            chatlieuContainer.innerHTML = ""; // X√≥a n·ªôi dung c≈©

            let chatlieuButtons = [];

            for (const idchatlieu of chatlieuIds) {
                const response = await fetch(`${apiChatlieu}/${idchatlieu}`);
                if (!response.ok) continue;

                const chatlieuData = await response.json();
                const chatlieuName = chatlieuData.tenchatlieu;

                chatlieuButtons.push(`
                    <div class="chatlieu-option" data-chatlieu="${idchatlieu}" style:width: 45px; height: 40px; display: inline-flex; align-items: center; justify-content: center;margin-right: 10px; cursor: pointer;  border: 1px solid #dee2e6; background-color: #fff; transition: all 0.3s ease; >
                        ${chatlieuName}
                    </div>
                `);
            }

            chatlieuContainer.innerHTML = chatlieuButtons.join('');

            // G√°n s·ª± ki·ªán click v√†o t·ª´ng n√∫t ch·∫•t li·ªáu sau khi th√™m v√†o DOM
            document.querySelectorAll(".chatlieu-option").forEach(button => {
                button.addEventListener("click", function () {
                    selectChatLieu(this); // G·ªçi h√†m ƒë√∫ng c√°ch
                });
            });

        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch ch·∫•t li·ªáu:", error);
        }
    }

    function selectSize(selectedButton) {
        document.querySelectorAll(".size-option").forEach(button => {
            button.classList.remove("active"); // X√≥a tr·∫°ng th√°i active c≈©
        });

        selectedButton.classList.add("active"); // Th√™m active cho ph·∫ßn t·ª≠ ƒë∆∞·ª£c ch·ªçn
    }

    function selectChatLieu(selectedButton) {
        document.querySelectorAll(".chatlieu-option").forEach(button => {
            button.classList.remove("active"); // X√≥a tr·∫°ng th√°i active c≈©
        });

        selectedButton.classList.add("active"); // Th√™m active cho ph·∫ßn t·ª≠ ƒë∆∞·ª£c ch·ªçn
    }

    async function fetchAndDisplaySize(sizeIds) {
        try {
            const sizeContainer = document.querySelector(".size-options");
            sizeContainer.innerHTML = ""; // X√≥a n·ªôi dung c≈©

            let sizeButtons = [];

            for (const idsize of sizeIds) {
                const response = await fetch(`${apiSize}/${idsize}`);
                if (!response.ok) continue;

                const sizeData = await response.json();
                const sizeName = sizeData.sosize;

                sizeButtons.push(`
                    <div class="size-option" data-size="${idsize}" 
                        style="style:width: 45px; height: 40px; display: inline-flex; align-items: center; justify-content: center;margin-right: 10px; cursor: pointer;  border: 1px solid #dee2e6; background-color: #fff; transition: all 0.3s ease; ">
                        ${sizeName}
                    </div>
                `);
            }

            sizeContainer.innerHTML = sizeButtons.join('');

            // ‚úÖ G√°n s·ª± ki·ªán click ƒë√∫ng c√°ch v√†o t·ª´ng `.size-option`
            document.querySelectorAll(".size-option").forEach(button => {
                button.addEventListener("click", function () {
                    selectSize(this); // G·ªçi h√†m ƒë√∫ng
                });
            });

        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch size:", error);
        }
    }


    function selectChatLieu(selectedButton) {
        document.querySelectorAll(".chatlieu-option").forEach(button => {
            button.classList.remove("active"); // X√≥a tr·∫°ng th√°i active c≈©
        });

        selectedButton.classList.add("active"); // Th√™m active cho ph·∫ßn t·ª≠ ƒë∆∞·ª£c ch·ªçn
    }

    async function fetchThuonghieu(idth) {
        try {
            if (!idth) {
                console.error("id th∆∞∆°ng hi·ªáu kh√¥ng h·ª£p l·ªá");
                return;
            }

            const response = await fetch(`${apiThuonghieu}/${idth}`);
            if (!response.ok) {
                throw new Error(`L·ªói API th∆∞∆°ng hi·ªáu: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin th∆∞∆°ng hi·ªáu:", error);
        }
    }

    function convertStatus(statusCode) {
        return statusCode === 0 ? "C√≤n h√†ng" : "H·∫øt h√†ng";
    }


    // G·ªçi API khi trang t·∫£i
    fetchDataSanPhamChiTiet();
})