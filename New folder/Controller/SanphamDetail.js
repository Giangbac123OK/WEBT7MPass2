
app.controller('SanphamDetail', function ($scope, $routeParams, $location) {
    const apiSPCTUrl = "https://localhost:7196/api/Sanphamchitiets";
    const apiSPUrl = "https://localhost:7196/api/Sanphams";
    const apiSize = "https://localhost:7196/api/size";
    const apiChatlieu = "https://localhost:7196/api/ChatLieu";
    const apiMau = "https://localhost:7196/api/color";
    const apiThuonghieu = "https://localhost:7196/api/thuonghieu";
    const apiDanhGia = "https://localhost:7196/api/Danhgia/GetByIdSP/";
    const apiHinhAnh = "https://localhost:7196/api/Hinhanh/DanhGia/";
    const apigioHang = "https://localhost:7196/api/Giohang/giohangkhachhang";
    const apigioHangChiTiet = "https://localhost:7196/api/Giohangchitiet";
    const sanPhamId = $routeParams.id;
    let dataspct = []; // S·ª≠a Set th√†nh m·∫£ng
    let datasanpham = [];

    async function fetchSanPhamChiTiet(sanPhamId) {
        try {
            if (!sanPhamId) {
                console.error("‚ùå ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá");
                return [];
            }
    
            const response = await fetch(`${apiSPUrl}/GetALLSanPham/${sanPhamId}`);
            
            if (!response.ok) {
                throw new Error(`‚ùå L·ªói API s·∫£n ph·∫©m chi ti·∫øt: ${response.status}`);
            }
    
            const data = await response.json();
    
            if (!data || (Array.isArray(data) && data.length === 0)) {
                console.warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m chi ti·∫øt.");
                return [];
            }
    
            console.log("‚úÖ D·ªØ li·ªáu s·∫£n ph·∫©m chi ti·∫øt:", data);
    
            // ƒê·∫£m b·∫£o `datasanpham` ch·ªâ nh·∫≠n d·ªØ li·ªáu h·ª£p l·ªá
            if (Array.isArray(data)) {
                datasanpham.push(...data);
            } else {
                datasanpham.push(data);
            }
    
            console.log("üìå Danh s√°ch s·∫£n ph·∫©m sau khi c·∫≠p nh·∫≠t:", datasanpham);
    
            return Array.isArray(data) ? data : [data];
    
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m chi ti·∫øt:", error);
            return [];
        }
    }    

    async function fetchDataSanPhamChiTiet() {
        try {
            const danhSachSPCT = await fetchSanPhamChiTiet(sanPhamId);
            if (!danhSachSPCT.length) return;
    
            const container = document.querySelector("#anhsanpham .thumbnail-container");
            const mainImage = document.querySelector("#main-product-image");
    
            let allImages = [];
            let colorIds = new Set();
            let chatlieuIds = new Set();
            let sizeIds = new Set();
            let allGiaSale = [];
    
            // L·∫∑p qua t·∫•t c·∫£ s·∫£n ph·∫©m chi ti·∫øt
            for (const spct of danhSachSPCT) {
                var thuonghieu = await fetchThuonghieu(spct.idThuongHieu);
                document.querySelector(".product-title").textContent = spct.tensp;
                document.querySelector("#product-detail").textContent = spct.mota;
                document.querySelector("#product-status").textContent = convertStatus(spct.trangThai);
                document.querySelector("#product-category").textContent = thuonghieu.tenthuonghieu;
    
                // Thu th·∫≠p gi√° c·ªßa s·∫£n ph·∫©m chi ti·∫øt
                for (const anhspct of spct.sanphamchitiets) {
                    if(anhspct.soluong <= 0){
                        continue;
                    }
                    if (anhspct.giaSaleSanPhamChiTiet != null) {
                        allGiaSale.push(anhspct.giaSaleSanPhamChiTiet);
                    } else {
                        allGiaSale.push(anhspct.giaBanSanPhamChiTiet);
                    }
    
                    // X·ª≠ l√Ω h√¨nh ·∫£nh
                    const response = await fetch(`${apiSPCTUrl}/GetImageById/${anhspct.id}`);
                    if (!response.ok) continue;
    
                    const blob = await response.blob();
                    const imageUrl = URL.createObjectURL(blob);
                    allImages.push({ url: imageUrl, id: anhspct.id });
    
                    // L·∫•y t·∫•t c·∫£ color, ch·∫•t li·ªáu, size
                    colorIds.add(anhspct.idMau);
                    chatlieuIds.add(anhspct.idChatLieu);
                    sizeIds.add(anhspct.idSize);
                }
    
                // Th√™m t·∫•t c·∫£ s·∫£n ph·∫©m chi ti·∫øt v√†o danh s√°ch chung
                dataspct.push(...spct.sanphamchitiets);
            }
    
            if (!allImages.length) return;
    
            // S·∫Øp x·∫øp gi√° t·ª´ th·∫•p ƒë·∫øn cao
            allGiaSale.sort((a, b) => a - b);
    
            // Hi·ªÉn th·ªã gi√° t·ª´ th·∫•p ƒë·∫øn cao
            if (allGiaSale.length > 0) {
                document.querySelector("#price-current").textContent = `${allGiaSale[0].toLocaleString("vi-VN")} VNƒê - ${allGiaSale[allGiaSale.length - 1].toLocaleString("vi-VN")} VNƒê`;
                document.querySelector("#price-original").style.display = "none";
            } else {
                document.querySelector("#price-current").textContent = "Ch∆∞a c√≥ gi√°";
            }
    
            // Hi·ªÉn th·ªã ·∫£nh v√†o thumbnail-container
            container.innerHTML = allImages.map((img, index) =>
                `<img src="${img.url}" class="thumbnail-img ${index === 0 ? 'active' : ''}" 
                data-img-url="${img.url}" data-id-spct="${img.id}" 
                alt="Thumbnail ${index + 1}">`
            ).join('');
    
            // Hi·ªÉn th·ªã ·∫£nh ƒë·∫ßu ti√™n v√†o position-relative
            mainImage.src = allImages[0].url;
    
            // Th√™m s·ª± ki·ªán click v√†o t·ª´ng thumbnail
            document.querySelectorAll(".thumbnail-img").forEach(thumbnail => {
                thumbnail.addEventListener("click", function () {
                    changeMainImage(this.dataset.imgUrl, this);
                });
            });
    
            await fetchAndDisplayColors([...colorIds]);
            await fetchAndDisplayChatlieus([...chatlieuIds]);
            await fetchAndDisplaySize([...sizeIds]);
    
            console.log("D·ªØ li·ªáu s·∫£n ph·∫©m chi ti·∫øt:", dataspct); // Debug ki·ªÉm tra d·ªØ li·ªáu l·∫•y ra
    
            await hienThiDanhGia();
            for (const spct of datasanpham) {
                LoadSanPhamTuongTu(spct.idThuongHieu, spct.id);
            }
        } catch (error) {
            console.error("L·ªói khi l·∫•y ·∫£nh s·∫£n ph·∫©m chi ti·∫øt:", error);
        }
    }    
    

    let currentPage = 1;
    const reviewsPerPage = 5;
    let danhGiaList = [];
    let danhGiaDaLoc = []; // L∆∞u danh s√°ch ƒë√£ l·ªçc

    async function hienThiDanhGia() {
        const reviewsContainer = document.getElementById("reviews");
        const filterContainer = document.getElementById("filterContainer");
        const avgRatingElement = document.getElementById("avgRating");
        const starDisplayElement = document.getElementById("starDisplay");
        const paginationContainer = document.getElementById("pagination");

        reviewsContainer.innerHTML = ""; 
        filterContainer.innerHTML = "";
        paginationContainer.innerHTML = "";

        let danhGiaCounts = {};
        let tongSao = 0;
        let tongDanhGia = 0;
        danhGiaList = [];

        for (const spct of dataspct) {
            try {
                let danhGiaData = await fetchDanhGia(spct.id);
                if (danhGiaData === null) continue; 

                if (!Array.isArray(danhGiaData)) {
                    danhGiaData = danhGiaData ? [danhGiaData] : [];
                }

                if (danhGiaData.length === 0) continue;

                for (const danhGia of danhGiaData) {
                    danhGiaCounts[danhGia.sosao] = (danhGiaCounts[danhGia.sosao] || 0) + 1;
                    tongSao += danhGia.sosao;
                    tongDanhGia++;

                    const hinhAnhList = await fetchHinhAnhDanhGia(danhGia.id);

                    danhGiaList.push({
                        idkh: danhGia.idkh,
                        sosao: danhGia.sosao,
                        noidungdanhgia: danhGia.noidungdanhgia,
                        hinhAnhList: hinhAnhList
                    });
                }
            } catch (error) {
                console.error(`L·ªói khi l·∫•y ƒë√°nh gi√° cho s·∫£n ph·∫©m ID ${spct.id}:`, error);
            }
        }

        let avgRating = tongDanhGia > 0 ? (tongSao / tongDanhGia).toFixed(1) : 0;
        avgRatingElement.textContent = `${avgRating}`;
        starDisplayElement.innerHTML = "‚òÖ".repeat(Math.round(avgRating)).padEnd(5, "‚òÜ");

        hienThiBoLoc();
        hienThiTrangDanhGia(); 
        hienThiPhanTrang();
    }

    function hienThiBoLoc() {
        const filterContainer = document.getElementById("filterContainer");
        filterContainer.innerHTML = "";
    
        let danhGiaCounts = {};
        danhGiaList.forEach(danhGia => {
            danhGiaCounts[danhGia.sosao] = (danhGiaCounts[danhGia.sosao] || 0) + 1;
        });
    
        let filterHTML = `<button class="filter-btn active" data-filter="all">T·∫•t C·∫£ (${danhGiaList.length})</button>`;
        for (let i = 5; i >= 1; i--) {
            if (danhGiaCounts[i]) {
                filterHTML += `<button class="filter-btn" data-filter="${i}">${i} Sao (${danhGiaCounts[i]})</button>`;
            }
        }
    
        filterContainer.innerHTML = filterHTML;
    
        document.querySelectorAll(".filter-btn").forEach(button => {
            button.addEventListener("click", function () {
                document.querySelectorAll(".filter-btn").forEach(btn => btn.classList.remove("active"));
                this.classList.add("active");
    
                const filterValue = this.dataset.filter;
                danhGiaDaLoc = (filterValue === "all") ? danhGiaList : danhGiaList.filter(dg => dg.sosao == filterValue);
    
                currentPage = 1; // Reset v·ªÅ trang 1 sau khi l·ªçc
                hienThiTrangDanhGia();
                hienThiPhanTrang();
            });
        });
    
        danhGiaDaLoc = danhGiaList; // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã t·∫•t c·∫£
    }
    
    // Hi·ªÉn th·ªã ƒë√°nh gi√° theo trang d·ª±a tr√™n danhGiaDaLoc
    function hienThiTrangDanhGia() {
        const reviewsContainer = document.getElementById("reviews");
        reviewsContainer.innerHTML = "";
    
        let startIndex = (currentPage - 1) * reviewsPerPage;
        let endIndex = startIndex + reviewsPerPage;
        let danhGiaHienTai = danhGiaDaLoc.slice(startIndex, endIndex);
    
        danhGiaHienTai.forEach(danhGia => {
            const reviewDiv = document.createElement("div");
            reviewDiv.classList.add("review");
            reviewDiv.dataset.rating = danhGia.sosao;
            reviewDiv.innerHTML = `
                <div class="review-header">
                    <span class="review-user"><strong>${danhGia.idkh}</strong></span>
                    <span class="review-rating">${"‚òÖ".repeat(danhGia.sosao)} (${danhGia.sosao}/5)</span>
                </div>
                <p class="review-content">${danhGia.noidungdanhgia}</p>
                <div class="review-images">
                    ${danhGia.hinhAnhList.map((url) => `<img src="${url}" class="review-img img-thumbnail" alt="·∫¢nh ƒë√°nh gi√°">`).join("")}
                </div>
            `;
            reviewsContainer.appendChild(reviewDiv);
        });
    }
    
    // Hi·ªÉn th·ªã ph√¢n trang d·ª±a tr√™n danhGiaDaLoc
    function hienThiPhanTrang() {
        const paginationContainer = document.getElementById("pagination");
        paginationContainer.innerHTML = "";
    
        let totalPages = Math.ceil(danhGiaDaLoc.length / reviewsPerPage);
    
        if (totalPages > 1) {
            const prevButton = document.createElement("button");
            prevButton.textContent = "¬´ Trang tr∆∞·ªõc";
            prevButton.disabled = currentPage <= 1;
            prevButton.addEventListener("click", () => {
                if (currentPage > 1) {
                    currentPage--;
                    hienThiTrangDanhGia();
                    hienThiPhanTrang();
                }
            });
    
            paginationContainer.appendChild(prevButton);
    
            for (let i = 1; i <= totalPages; i++) {
                const pageButton = document.createElement("button");
                pageButton.textContent = i;
                pageButton.classList.add("page-button");
                if (i === currentPage) {
                    pageButton.classList.add("active");
                }
                pageButton.addEventListener("click", () => {
                    currentPage = i;
                    hienThiTrangDanhGia();
                    hienThiPhanTrang();
                });
    
                paginationContainer.appendChild(pageButton);
            }
    
            const nextButton = document.createElement("button");
            nextButton.textContent = "Trang sau ¬ª";
            nextButton.disabled = currentPage >= totalPages;
            nextButton.addEventListener("click", () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    hienThiTrangDanhGia();
                    hienThiPhanTrang();
                }
            });
    
            paginationContainer.appendChild(nextButton);
        }
    }
    
    // H√†m thay ƒë·ªïi ·∫£nh ch√≠nh khi click v√†o thumbnail
    function changeMainImage(imageUrl, clickedThumbnail) {
        const mainImage = document.querySelector("#main-product-image");
        if (mainImage) {
            mainImage.src = imageUrl;
        }

        // Lo·∫°i b·ªè class "active" kh·ªèi t·∫•t c·∫£ ·∫£nh thumbnail
        document.querySelectorAll(".thumbnail-img").forEach(img => img.classList.remove("active"));

        // Th√™m class "active" cho ·∫£nh ƒëang ch·ªçn
        clickedThumbnail.classList.add("active");
    }

    // ƒê·∫£m b·∫£o khai b√°o c√°c bi·∫øn tr∆∞·ªõc khi s·ª≠ d·ª•ng
    let selectedColorId = null;
    let selectedSizeId = null;
    let selectedChatlieuId = null;

    function updateSizeOptions(validSizeIds) {
        document.querySelectorAll(".size-option").forEach(button => {
            const sizeId = parseInt(button.getAttribute("data-size"), 10);

            if (validSizeIds.includes(sizeId)) {
                button.disabled = false;
                button.style.opacity = "1";
                button.style.pointerEvents = "auto";
            } else {
                button.disabled = true;
                button.style.opacity = "0.5";
                button.style.pointerEvents = "none";
                button.classList.remove("active");
            }
        });

        if (selectedSizeId && !validSizeIds.includes(parseInt(selectedSizeId, 10))) {
            selectedSizeId = null;
        }
    }


    function updateChatlieuOptions(validChatlieuIds) {
        document.querySelectorAll(".chatlieu-option").forEach(button => {
            const chatlieuId = parseInt(button.getAttribute("data-chatlieu"), 10);

            if (validChatlieuIds.includes(chatlieuId)) {
                button.disabled = false;
                button.style.opacity = "1";
                button.style.pointerEvents = "auto";
            } else {
                button.disabled = true;
                button.style.opacity = "0.5";
                button.style.pointerEvents = "none";
                button.classList.remove("active");
            }
        });

        if (selectedChatlieuId && !validChatlieuIds.includes(parseInt(selectedChatlieuId, 10))) {
            selectedChatlieuId = null;
        }
    }

    function filterSanPhamChiTiet() {
        let filteredSPCTs = dataspct;

        // Ch·ªâ l·ªçc n·∫øu gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn kh√¥ng ph·∫£i null ho·∫∑c r·ªóng
        if (selectedColorId !== null && selectedColorId !== "") {
            filteredSPCTs = filteredSPCTs.filter(sp => sp.idMau == selectedColorId);
        }
        if (selectedSizeId !== null && selectedSizeId !== "") {
            filteredSPCTs = filteredSPCTs.filter(sp => sp.idSize == selectedSizeId);
        }
        if (selectedChatlieuId !== null && selectedChatlieuId !== "") {
            filteredSPCTs = filteredSPCTs.filter(sp => sp.idChatLieu == selectedChatlieuId);
        }

        // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ ƒë·ªÅu kh√¥ng ch·ªçn th√¨ hi·ªÉn th·ªã to√†n b·ªô s·∫£n ph·∫©m
        if (!selectedColorId && !selectedSizeId && !selectedChatlieuId) {
            filteredSPCTs = dataspct;
        }

        // L·∫•y danh s√°ch thu·ªôc t√≠nh h·ª£p l·ªá t·ª´ k·∫øt qu·∫£ l·ªçc
        const validSizeIds = new Set(filteredSPCTs.map(sp => sp.idSize));
        const validChatlieuIds = new Set(filteredSPCTs.map(sp => sp.idChatLieu));
        const validColorIds = new Set(filteredSPCTs.map(sp => sp.idMau));

        // C·∫≠p nh·∫≠t giao di·ªán v·ªõi c√°c t√πy ch·ªçn h·ª£p l·ªá
        updateSizeOptions([...validSizeIds]);
        updateChatlieuOptions([...validChatlieuIds]);
        updateColorOptions([...validColorIds]);

        // Ch·ªâ c·∫≠p nh·∫≠t h√¨nh ·∫£nh khi ch·ªçn ƒë·ªß 3 thu·ªôc t√≠nh
        if (selectedColorId && selectedSizeId && selectedChatlieuId) {
            checkAndDisplayMainImage(filteredSPCTs);
            updateQuantity();
        }
    }


    function updateColorOptions(validColorIds) {
        document.querySelectorAll(".color-option").forEach(button => {
            const colorId = parseInt(button.getAttribute("data-color"), 10);

            if (validColorIds.includes(colorId)) {
                button.disabled = false;
                button.style.opacity = "1";
                button.style.pointerEvents = "auto";
            } else {
                button.disabled = true;
                button.style.opacity = "0.5";
                button.style.pointerEvents = "none";
                button.classList.remove("active");
            }
        });

        if (selectedColorId && !validColorIds.includes(parseInt(selectedColorId, 10))) {
            selectedColorId = null;
        }
    }

    // üü¢ X·ª≠ l√Ω ch·ªçn m√†u, ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt m√†u duy nh·∫•t
    function selectColor(selectedButton) {
        document.querySelectorAll(".color-option").forEach(button => {
            button.classList.remove("active");
        });

        selectedButton.classList.add("active");

        selectedColorId = selectedButton.getAttribute("data-color");

        // G·ªçi h√†m l·ªçc s·∫£n ph·∫©m chi ti·∫øt
        filterSanPhamChiTiet();
    }

    function selectChatlieu(selectedButton) {
        document.querySelectorAll(".chatlieu-option").forEach(button => {
            button.classList.remove("active");
        });

        selectedButton.classList.add("active");
        selectedChatlieuId = selectedButton.getAttribute("data-chatlieu");

        filterSanPhamChiTiet();
    }

    // üü¢ H√†m hi·ªÉn th·ªã m√†u s·∫Øc t·ª´ API l√™n giao di·ªán
    async function fetchAndDisplayColors(colorIds) {
        try {
            const colorContainer = document.querySelector(".color-options");
            colorContainer.innerHTML = ""; // X√≥a m√†u c≈©

            for (const idMau of colorIds) {
                const response = await fetch(`${apiMau}/${idMau}`);
                if (!response.ok) continue;

                const colorData = await response.json();
                const colorCode = colorData.mamau;

                // T·∫°o n√∫t m√†u v·ªõi d·∫•u t√≠ch ‚úî
                const colorButton = document.createElement("button");
                colorButton.classList.add("btn", "btn-outline-secondary", "me-2", "color-option");
                colorButton.style.backgroundColor = colorCode;
                colorButton.style.color = "#fff";
                colorButton.style.padding = "18px";
                colorButton.setAttribute("data-color", idMau);

                // G√°n s·ª± ki·ªán click
                colorButton.addEventListener("click", function () {
                    selectColor(this);
                });

                // Th√™m v√†o giao di·ªán
                colorContainer.appendChild(colorButton);
            }
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch m√†u:", error);
        }
    }
    // L·∫•y danh s√°ch ƒë√°nh gi√° t·ª´ API
    async function fetchDanhGia(idspct) {
        try {
            const response = await fetch(`${apiDanhGia}${idspct}`);
            if (!response.ok) {
                if (response.status === 404) {
                    return null; // Tr·∫£ v·ªÅ null n·∫øu g·∫∑p l·ªói 404
                }
                throw new Error(`L·ªói API ƒë√°nh gi√°: ${response.status}`);
            }

            const danhGiaData = await response.json();
            return danhGiaData || []; // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        } catch (error) {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu ƒë√°nh gi√°:", error);
            return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng thay v√¨ `null` ho·∫∑c `undefined`
        }
    }

    // L·∫•y h√¨nh ·∫£nh ƒë√°nh gi√° t·ª´ API
    async function fetchHinhAnhDanhGia(danhGiaId) {
        try {
            const response = await fetch(`${apiHinhAnh}${danhGiaId}`);
            if (!response.ok) return [];

            const hinhAnhData = await response.json();
            return hinhAnhData.map(img => img.url); // Tr·∫£ v·ªÅ danh s√°ch URL ·∫£nh
        } catch (error) {
            console.error("L·ªói khi l·∫•y h√¨nh ·∫£nh ƒë√°nh gi√°:", error);
            return [];
        }
    }

    async function fetchAndDisplayChatlieus(chatlieuIds) {
        try {
            const chatlieuContainer = document.querySelector(".chatlieu-options");
            chatlieuContainer.innerHTML = ""; // X√≥a n·ªôi dung c≈©

            let chatlieuButtons = [];

            for (const idchatlieu of chatlieuIds) {
                const response = await fetch(`${apiChatlieu}/${idchatlieu}`);
                if (!response.ok) continue;

                const chatlieuData = await response.json();
                const chatlieuName = chatlieuData.tenchatlieu;

                chatlieuButtons.push(`
                    <div class="chatlieu-option" data-chatlieu="${idchatlieu}" style:width: 45px; height: 40px; display: inline-flex; align-items: center; justify-content: center;margin-right: 10px; cursor: pointer;  border: 1px solid #dee2e6; background-color: #fff; transition: all 0.3s ease; >
                        ${chatlieuName}
                    </div>
                `);
            }

            chatlieuContainer.innerHTML = chatlieuButtons.join('');

            // G√°n s·ª± ki·ªán click v√†o t·ª´ng n√∫t ch·∫•t li·ªáu sau khi th√™m v√†o DOM
            document.querySelectorAll(".chatlieu-option").forEach(button => {
                button.addEventListener("click", function () {
                    selectChatlieu(this); // G·ªçi h√†m ƒë√∫ng c√°ch
                });
            });

        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch ch·∫•t li·ªáu:", error);
        }
    }

    function checkAndDisplayMainImage(filteredSPCTs) {
        if (!filteredSPCTs.length) return;

        const firstImageId = filteredSPCTs[0].id;
        const selectedImage = document.querySelector(`.thumbnail-img[data-id-spct="${firstImageId}"]`);

        if (selectedImage) {
            changeMainImage(selectedImage.dataset.imgUrl, selectedImage);
        }
    }


    function selectSize(selectedButton) {
        document.querySelectorAll(".size-option").forEach(button => {
            button.classList.remove("active");
        });

        selectedButton.classList.add("active");
        selectedSizeId = selectedButton.getAttribute("data-size");

        filterSanPhamChiTiet();
    }

    function selectChatlieu(selectedButton) {
        document.querySelectorAll(".chatlieu-option").forEach(button => {
            button.classList.remove("active");
        });

        selectedButton.classList.add("active");
        selectedChatlieuId = selectedButton.getAttribute("data-chatlieu");

        filterSanPhamChiTiet();
    }


    async function fetchAndDisplaySize(sizeIds) {
        try {
            const sizeContainer = document.querySelector(".size-options");
            sizeContainer.innerHTML = ""; // X√≥a n·ªôi dung c≈©

            let sizeButtons = [];

            for (const idsize of sizeIds) {
                const response = await fetch(`${apiSize}/${idsize}`);
                if (!response.ok) continue;

                const sizeData = await response.json();
                const sizeName = sizeData.sosize;

                sizeButtons.push(`
                    <div class="size-option" data-size="${idsize}" 
                        style="style:width: 45px; height: 40px; display: inline-flex; align-items: center; justify-content: center;margin-right: 10px; cursor: pointer;  border: 1px solid #dee2e6; background-color: #fff; transition: all 0.3s ease; ">
                        ${sizeName}
                    </div>
                `);
            }

            sizeContainer.innerHTML = sizeButtons.join('');

            // ‚úÖ G√°n s·ª± ki·ªán click ƒë√∫ng c√°ch v√†o t·ª´ng `.size-option`
            document.querySelectorAll(".size-option").forEach(button => {
                button.addEventListener("click", function () {
                    selectSize(this); // G·ªçi h√†m ƒë√∫ng
                });
            });

        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch size:", error);
        }
    }

    async function fetchThuonghieu(idth) {
        try {
            if (!idth) {
                console.error("id th∆∞∆°ng hi·ªáu kh√¥ng h·ª£p l·ªá");
                return;
            }

            const response = await fetch(`${apiThuonghieu}/${idth}`);
            if (!response.ok) {
                throw new Error(`L·ªói API th∆∞∆°ng hi·ªáu: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin th∆∞∆°ng hi·ªáu:", error);
        }
    }

    function convertStatus(statusCode) {
        return statusCode === 0 ? "C√≤n h√†ng" : (statusCode === 1 ? "H·∫øt h√†ng" : "Kh√¥ng x√°c ƒë·ªãnh");
    }    

    function resetSelections() {
        // X√≥a c√°c thu·ªôc t√≠nh ƒë√£ ch·ªçn
        selectedColorId = null;
        selectedSizeId = null;
        selectedChatlieuId = null;
    
        // X√≥a tr·∫°ng th√°i active c·ªßa c√°c button
        document.querySelectorAll(".color-option, .size-option, .chatlieu-option").forEach(button => {
            button.classList.remove("active");
            button.disabled = false;
            button.style.opacity = "1";
            button.style.pointerEvents = "auto";
        });
    
        let allGiaSale = [];
    
        for (const spct of datasanpham) {
            document.querySelector("#product-detail").textContent = spct.mota;
            document.querySelector("#product-status").textContent = convertStatus(spct.trangThai);
    
            for (const spctItem of spct.sanphamchitiets) {
                if (spctItem.giaSaleSanPhamChiTiet != null) {
                    allGiaSale.push(spctItem.giaSaleSanPhamChiTiet);
                } else {
                    allGiaSale.push(spctItem.giaBanSanPhamChiTiet);
                }
            }
        }
    
        // S·∫Øp x·∫øp gi√° t·ª´ th·∫•p ƒë·∫øn cao
        allGiaSale.sort((a, b) => a - b);
        document.querySelector("#price-original").style.display = "none";

        // Hi·ªÉn th·ªã gi√° theo kho·∫£ng t·ª´ th·∫•p nh·∫•t ƒë·∫øn cao nh·∫•t
        if (allGiaSale.length > 0) {
            document.querySelector("#price-current").textContent = `${allGiaSale[0].toLocaleString("vi-VN")} VNƒê - ${allGiaSale[allGiaSale.length - 1].toLocaleString("vi-VN")} VNƒê`;
        } else {
            document.querySelector("#price-current").textContent = "Ch∆∞a c√≥ gi√°";
        }
    
        updateQuantity();
        console.log("ƒê√£ ƒë·∫∑t l·∫°i c√°c l·ª±a ch·ªçn v·ªÅ m·∫∑c ƒë·ªãnh.");
    }
    

    document.getElementById("increase-quantity").addEventListener("click", function () {
        if (!selectedColorId || !selectedSizeId || !selectedChatlieuId) return;

        let selectedProduct = dataspct.find(sp =>
            sp.idMau == selectedColorId &&
            sp.idSize == selectedSizeId &&
            sp.idChatLieu == selectedChatlieuId
        );

        if (!selectedProduct) return;

        let quantityInput = document.getElementById("quantity");
        let currentQuantity = parseInt(quantityInput.value, 10);
        let maxQuantity = selectedProduct.soluong - 1; // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng c√≥ th·ªÉ mua

        if (currentQuantity < maxQuantity) {
            quantityInput.value = currentQuantity + 1;
        } else {
            alert("B·∫°n ch·ªâ c√≥ th·ªÉ mua t·ªëi ƒëa " + maxQuantity + " s·∫£n ph·∫©m.");
        }
    });

    document.getElementById("decrease-quantity").addEventListener("click", function () {
        let quantityInput = document.getElementById("quantity");
        let currentQuantity = parseInt(quantityInput.value, 10);

        if (currentQuantity > 1) {
            quantityInput.value = currentQuantity - 1;
        }
    });

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán khi ƒë·ªß 3 thu·ªôc t√≠nh
    function updateQuantity() {
        let quantityInput = document.getElementById("quantity");
        let priceCurrent = document.querySelector("#price-current");
        let priceOriginal = document.querySelector("#price-original");
        let productStatus = document.querySelector("#product-status");

        if (selectedColorId && selectedSizeId && selectedChatlieuId) {
            let selectedProduct = dataspct.find(sp =>
                sp.idMau == selectedColorId &&
                sp.idSize == selectedSizeId &&
                sp.idChatLieu == selectedChatlieuId
            );
    
            if (selectedProduct) {
                let maxQuantity = selectedProduct.soLuong;
                quantityInput.value = 1; // ƒê·∫∑t l·∫°i s·ªë l∆∞·ª£ng v·ªÅ 1
                quantityInput.setAttribute("max", maxQuantity); // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
                productStatus.textContent = convertStatus(selectedProduct.trangThai);
    
                // L·∫•y gi√° t·∫°i th·ªùi ƒëi·ªÉm hi·ªán t·∫°i v√† gi√° sale
                let giaThoiDiemHienTai = selectedProduct.giathoidiemhientai;
                let giaSaleSanPhamChiTiet = selectedProduct.giaSaleSanPhamChiTiet;
    
                // Ki·ªÉm tra gi√° ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng format
                if (giaThoiDiemHienTai > giaSaleSanPhamChiTiet) {
                    priceCurrent.textContent = `${giaSaleSanPhamChiTiet.toLocaleString("vi-VN")} VNƒê`;
                    priceOriginal.textContent = `${giaThoiDiemHienTai.toLocaleString("vi-VN")} VNƒê`;
                    priceOriginal.style.display = ""
                } else {
                    priceCurrent.textContent = `${giaThoiDiemHienTai.toLocaleString("vi-VN")} VNƒê`;
                    document.querySelector("#price-original").style.display = "none"; // ·∫®n gi√° g·ªëc n·∫øu 2 gi√° b·∫±ng nhau
                }
            }
        } else {
            quantityInput.value = 1;
        }
    }    

    $scope.muaSanphamNgay = function() {
        let inputQuantity = parseInt(document.querySelector("#quantity").value, 10);
    
        if (!selectedColorId || !selectedSizeId || !selectedChatlieuId) {
            Swal.fire("L·ªói", "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß M√†u s·∫Øc, K√≠ch th∆∞·ªõc v√† Ch·∫•t li·ªáu.", "error");
            return;
        }
    
        let selectedSPCT = dataspct.find(spct =>
            spct.idMau == selectedColorId &&
            spct.idSize == selectedSizeId &&
            spct.idChatLieu == selectedChatlieuId
        );
    
        if (!selectedSPCT) {
            Swal.fire("L·ªói", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.", "error");
            return;
        }
    
        if (selectedSPCT.trangThai == 1) {
            Swal.fire("L·ªói", "S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng kh√¥ng th·ªÉ mua ƒë∆∞·ª£c.", "error");
            return;
        }
    
        if (inputQuantity >= selectedSPCT.soluong) {
            Swal.fire("L·ªói", `B·∫°n ch·ªâ c√≥ th·ªÉ mua t·ªëi ƒëa ${selectedSPCT.soluong - 1} s·∫£n ph·∫©m.`, "error");
            return;
        }
    
        // L∆∞u v√†o sessionStorage (ho·∫∑c localStorage n·∫øu mu·ªën gi·ªØ l√¢u h∆°n)
        sessionStorage.setItem("selectedSPCTId", selectedSPCT.id);
        sessionStorage.setItem("inputQuantity", inputQuantity);
    
        // Chuy·ªÉn h∆∞·ªõng sang trang kh√°c k√®m theo ID s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng
        console.log("Chuy·ªÉn h∆∞·ªõng ƒë·∫øn:", `/hoadon/${selectedSPCT.id}?quantity=${inputQuantity}`);
        $location.path(`/hoadon/${selectedSPCT.id}`).search({ quantity: inputQuantity });
    }       

    function GetByidKH() {
        // L·∫•y d·ªØ li·ªáu t·ª´ localStorage
        const userInfoString = localStorage.getItem("userInfo");
        let userId = 0; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ th√¥ng tin kh√°ch h√†ng

        // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu t·ªìn t·∫°i
        if (userInfoString) {
            try {
                // Chuy·ªÉn ƒë·ªïi chu·ªói JSON th√†nh ƒë·ªëi t∆∞·ª£ng
                const userInfo = JSON.parse(userInfoString);

                // Ki·ªÉm tra v√† l·∫•y gi√° tr·ªã id t·ª´ userInfo
                userId = userInfo?.id || 0;
            } catch (error) {
                console.error("L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu userInfo:", error);
            }
        } else {
            console.warn("D·ªØ li·ªáu userInfo kh√¥ng t·ªìn t·∫°i trong localStorage.");
        }

        return userId;
    }

    // H√†m l·∫•y id gi·ªè h√†ng
    async function fetchGioHangId(idkh) {
        try {
            const response = await fetch(`${apigioHang}/${idkh}`);
            const data =  await response.json();
            console.log(data);
            return data;
        } catch (error) {
            console.error("L·ªói khi l·∫•y id gi·ªè h√†ng:", error);
            return null;
        }
    }

    async function AddGHCT() {
        try {
            const idkh = GetByidKH();
            const idgh = await fetchGioHangId(idkh);
            if (!idgh) {
                Swal.fire("L·ªói", "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng c·ªßa b·∫°n.", "error");
                return;
            }
    
            // L·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ng∆∞·ªùi d√πng nh·∫≠p
            let inputQuantity = parseInt(document.querySelector("#quantity").value, 10);
            if (isNaN(inputQuantity) || inputQuantity <= 0) {
                Swal.fire("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá.", "error");
                return;
            }
    
            // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ch·ªçn ƒë·ªß thu·ªôc t√≠nh ch∆∞a
            if (!selectedColorId || !selectedSizeId || !selectedChatlieuId) {
                Swal.fire("L·ªói", "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß M√†u s·∫Øc, K√≠ch th∆∞·ªõc v√† Ch·∫•t li·ªáu.", "error");
                return;
            }
    
            // L·ªçc s·∫£n ph·∫©m chi ti·∫øt d·ª±a tr√™n thu·ªôc t√≠nh ƒë√£ ch·ªçn
            let selectedSPCT = dataspct.find(spct =>
                spct.idMau == selectedColorId &&
                spct.idSize == selectedSizeId &&
                spct.idChatLieu == selectedChatlieuId
            );
    
            if (!selectedSPCT) {
                Swal.fire("L·ªói", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.", "error");
                return;
            }
    
            // Ki·ªÉm tra tr·∫°ng th√°i s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng t·ªìn kho
            if (selectedSPCT.trangThai == 1) {
                Swal.fire("L·ªói", "S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng kh√¥ng th·ªÉ mua ƒë∆∞·ª£c.", "error");
                return;
            }
    
            if (inputQuantity > selectedSPCT.soluong) {
                Swal.fire("L·ªói", `B·∫°n ch·ªâ c√≥ th·ªÉ mua t·ªëi ƒëa ${selectedSPCT.soluong} s·∫£n ph·∫©m.`, "error");
                return;
            }
    
            // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ th√™m v√†o gi·ªè h√†ng
            const newGioHangCT = {
                id: 0,
                idgh: idgh.id,
                idspct: selectedSPCT.id,
                soluong: inputQuantity,
            };
    
            // G·ª≠i y√™u c·∫ßu th√™m v√†o gi·ªè h√†ng
            const response = await fetch(apigioHangChiTiet, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(newGioHangCT)
            });
    
            // Ki·ªÉm tra ph·∫£n h·ªìi API
            if (!response.ok) {
                const errorData = await response.json();
                Swal.fire("L·ªói", errorData.message || "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.", "error");
                return;
            }
    
            Swal.fire({
                title: "Th√†nh c√¥ng",
                text: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng.",
                icon: "success",
                confirmButtonText: "OK"
            }).then((result) => {
                if (result.isConfirmed) {
                    $scope.$apply(() => {
                        $location.path('/giohang'); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang "Gi·ªè h√†ng"
                    });
                }
                $scope.isLoading = false; // K·∫øt th√∫c t·∫£i (n·∫øu c·∫ßn)
            });            
    
        } catch (error) {
            console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
            Swal.fire("L·ªói", "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.", "error");
        }
    }     
    
    async function LoadSanPhamTuongTu(idThuongHieu, idSanPhamHienTai) {
        if (!idThuongHieu) {
            console.warn("idThuongHieu kh√¥ng t·ªìn t·∫°i.");
            return;
        }
    
        try {
            const response = await fetch(`https://localhost:7196/api/Sanphams/GetALLSanPhamByThuongHieu/${idThuongHieu}`);
            if (!response.ok) {
                throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t∆∞∆°ng t·ª±.");
            }
    
            let data = await response.json();
    
            // L·ªçc b·ªè s·∫£n ph·∫©m hi·ªán t·∫°i kh·ªèi danh s√°ch
            const filteredProducts = data.filter(product => product.id !== idSanPhamHienTai);
    
            // L·∫•y danh s√°ch s·∫£n ph·∫©m t∆∞∆°ng t·ª± ng·∫´u nhi√™n
            const sanPhamsTuongTu = randomizeProducts(filteredProducts, 4);
    
            // Hi·ªÉn th·ªã s·∫£n ph·∫©m v√†o giao di·ªán
            hienThiSanPhamTuongTu(sanPhamsTuongTu);
    
            console.log("Danh s√°ch s·∫£n ph·∫©m t∆∞∆°ng t·ª±:", sanPhamsTuongTu);
        } catch (error) {
            console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m t∆∞∆°ng t·ª±:", error);
        }
    }
    
    async function hienThiSanPhamTuongTu(datasanPhams) {
        let sanPhams = [];
    
        for (const data of datasanPhams) {
            try {
                const spctList = await fetchSanPhamChiTiet(data.id); // L·∫•y danh s√°ch s·∫£n ph·∫©m chi ti·∫øt
    
                if (spctList.length > 0) {
                    for (const spctGroup of spctList) { // Duy·ªát t·ª´ng nh√≥m s·∫£n ph·∫©m chi ti·∫øt
                        const spct = spctGroup.sanphamchitiets?.[0]; // Ch·ªâ l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
    
                        if (spct) { // N·∫øu c√≥ s·∫£n ph·∫©m chi ti·∫øt
                            const response = await fetch(`${apiSPCTUrl}/GetImageById/${spct.id}`);
                            if (!response.ok) continue;
    
                            const blob = await response.blob();
                            const imageUrl = URL.createObjectURL(blob);
    
                            sanPhams.push({
                                tensp: data.tensp,
                                giaban: data.giaban,
                                giasale: data.giasale,
                                anh: imageUrl || "default-image.jpg" // S·ª≠ d·ª•ng ·∫£nh ho·∫∑c ·∫£nh m·∫∑c ƒë·ªãnh
                            });
                        }
                    }
                }
            } catch (error) {
                console.error(`L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m ${data.id}:`, error);
            }
        }
    
        const container = document.querySelector(".related-products .row");
        if (!container) return;
    
        container.innerHTML = sanPhams.map(sp => `
            <div class="col-md-3 col-6 mb-4">
                <div class="card h-100 position-relative">
                    ${sp.giasale && sp.giasale < sp.giaban ? `
                        <div class="position-absolute top-0 end-0 bg-warning text-dark p-2 m-2 small">
                            ${Math.round(((sp.giaban - sp.giasale) / sp.giaban) * 100)}% GI·∫¢M
                        </div>` 
                    : ""}
                    <img src="${sp.anh}" class="card-img-top product-image" alt="${sp.tensp}">
                    <div class="card-body">
                        <h5 class="card-title">${sp.tensp}</h5>
                        <p class="card-text">
                            <span class="text-danger fw-bold">${sp.giasale.toLocaleString("vi-VN")}ƒë</span>
                            ${sp.giasale < sp.giaban ? 
                                `<small class="text-muted text-decoration-line-through ms-2">${sp.giaban.toLocaleString("vi-VN")}ƒë</small>` 
                            : ""}
                        </p>
                    </div>
                </div>
            </div>
        `).join('');        
    }
    
        
    // H√†m ch·ªçn ng·∫´u nhi√™n s·∫£n ph·∫©m
    function randomizeProducts(products, maxItems) {
        if (products.length > maxItems) {
            return products.sort(() => 0.5 - Math.random()).slice(0, maxItems);
        }
        return products;
    }    

    // G√°n s·ª± ki·ªán cho n√∫t "X√≥a t·∫•t c·∫£"
    document.getElementById("btnResetSelections").addEventListener("click", resetSelections);
    document.getElementById("addtocart").addEventListener("click", AddGHCT);

    document.getElementById("toggleReviews").addEventListener("click", function () {
        const reviews = document.getElementById("reviews");
        if (reviews.style.display === "none" || reviews.style.display === "") {
            reviews.style.display = "block";
            this.textContent = "Thu g·ªçn ƒë√°nh gi√° ‚ñ≤";
        } else {
            reviews.style.display = "none";
            this.textContent = "Xem ƒë√°nh gi√° ‚ñº";
        }
    });
    

    // G·ªçi API khi trang t·∫£i
    fetchDataSanPhamChiTiet();
})