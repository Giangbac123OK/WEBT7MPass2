app.controller('diachiController', function ($scope, $http) {
    const apiKey = "7b4f1e5c-0700-11f0-94b6-be01e07a48b5";
    const apiProvince = "https://online-gateway.ghn.vn/shiip/public-api/master-data/province";
    const apiDistrict = "https://online-gateway.ghn.vn/shiip/public-api/master-data/district";
    const apiWard = "https://online-gateway.ghn.vn/shiip/public-api/master-data/ward";
    const apiAddressList = "https://localhost:7196/api/Diachi";
    const idkh = GetByidKH();
    $scope.edit = [];

    const selectTinh = document.getElementById("selectTinh");
    const selectQuan = document.getElementById("selectQuan");
    const selectPhuong = document.getElementById("selectPhuong");
    const updateTinh = document.getElementById("updateTinh");
    const updateQuan = document.getElementById("updateQuan");
    const updatePhuong = document.getElementById("updatePhuong");

    let wardMap = {};
    let provinceMap = {};
    let districtMap = {};

    async function fetchProvinces() {
        try {
            const response = await fetch(apiProvince, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": apiKey
                }
            });
            const data = await response.json();
            if (data.code === 200) {
                data.data.forEach(province => {
                    provinceMap[province.ProvinceID] = province.NameExtension[1];
                });
            }
        } catch (error) {
            console.error("L·ªói l·∫•y danh s√°ch t·ªânh:", error);
        }
    }

    async function fetchDistricts() {
        try {
            const response = await fetch(apiDistrict, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": apiKey
                }
            });
            const data = await response.json();
            if (data.code === 200) {
                data.data.forEach(district => {
                    districtMap[district.DistrictID] = district.DistrictName;
                });
            }
        } catch (error) {
            console.error("L·ªói l·∫•y danh s√°ch qu·∫≠n/huy·ªán:", error);
        }
    }

    async function fetchWards(districtId) {
        if (!districtId) {
            console.warn("‚ö† Kh√¥ng c√≥ Qu·∫≠n/Huy·ªán ƒë∆∞·ª£c ch·ªçn!");
            return;
        }

        try {
            console.log("üì° G·ª≠i y√™u c·∫ßu l·∫•y danh s√°ch Ph∆∞·ªùng/X√£ cho Qu·∫≠n/Huy·ªán ID:", districtId);

            const response = await fetch(apiWard, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": apiKey
                },
                body: JSON.stringify({ district_id: Number(districtId) })
            });

            const data = await response.json();
            console.log("üì° Ph·∫£n h·ªìi t·ª´ API Ph∆∞·ªùng/X√£:", data);

            if (data.code === 200 && data.data.length > 0) {
                data.data.forEach(ward => {
                    wardMap[ward.WardCode] = ward.WardName;
                });
            } else {
                console.error("‚ùå API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá:", data);
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ph∆∞·ªùng/x√£:", error);
        }
    }

    async function loadAddressData() {
        await Promise.all([fetchProvinces(), fetchDistricts()]);

        fetch(`${apiAddressList}/khachhang/${idkh}`)
            .then(response => response.json())
            .then(async (data) => {
                // L·∫•y danh s√°ch c√°c qu·∫≠n/huy·ªán c·∫ßn fetch ph∆∞·ªùng/x√£
                const districtIds = [...new Set(data.map(address => address.quanhuyen))];

                // Ch·ªù l·∫•y t·∫•t c·∫£ danh s√°ch ph∆∞·ªùng/x√£ tr∆∞·ªõc khi render
                await Promise.all(districtIds.map(id => fetchWards(id)));

                // Render danh s√°ch sau khi c√≥ ƒë·ªß d·ªØ li·ªáu
                renderAddressList(data);
            })
            .catch(error => console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error));
    }

    function GetByidKH() {
        // L·∫•y d·ªØ li·ªáu t·ª´ localStorage
        const userInfoString = localStorage.getItem("userInfo");
        let userId = 0; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ th√¥ng tin kh√°ch h√†ng

        // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu t·ªìn t·∫°i
        if (userInfoString) {
            try {
                // Chuy·ªÉn ƒë·ªïi chu·ªói JSON th√†nh ƒë·ªëi t∆∞·ª£ng
                const userInfo = JSON.parse(userInfoString);

                // Ki·ªÉm tra v√† l·∫•y gi√° tr·ªã id t·ª´ userInfo
                userId = userInfo?.id || 0;
            } catch (error) {
                console.error("L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu userInfo:", error);
            }
        } else {
            console.warn("D·ªØ li·ªáu userInfo kh√¥ng t·ªìn t·∫°i trong localStorage.");
        }

        return userId;
    }

    // Render danh s√°ch ƒë·ªãa ch·ªâ ra giao di·ªán (phi√™n b·∫£n m·ªõi)
    function renderAddressList(addresses) {
        const addressContainer = document.querySelector(".diachi-list");

        // S·∫Øp x·∫øp danh s√°ch: ƒê·ªãa ch·ªâ c√≥ tr·∫°ng th√°i = 0 l√™n ƒë·∫ßu
        addresses.sort((a, b) => parseInt(a.trangthai, 10) - parseInt(b.trangthai, 10));

        addressContainer.innerHTML = addresses.map(address => {
            const provinceName = provinceMap[address.thanhpho] || "Kh√¥ng x√°c ƒë·ªãnh";
            const districtName = districtMap[address.quanhuyen] || "Kh√¥ng x√°c ƒë·ªãnh";
            const wardName = wardMap[address.phuongxa] || "Kh√¥ng x√°c ƒë·ªãnh";

            const isDefault = parseInt(address.trangthai, 10) === 0;
            const cardClass = isDefault ? "address-card address-card-default" : "address-card";

            return `
        <div class="col-md-6">
            <div class="${cardClass} p-4 mb-3 bg-white rounded-4 h-100">
                <div class="d-flex">
                    <div class="address-icon me-3">
                        <i class="bi bi-house"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-start">
                            <h5 class="fw-bold mb-1">${address.tennguoinhan}</h5>
                            ${isDefault ? '<span class="badge bg-warning">M·∫∑c ƒë·ªãnh</span>' : ''}
                        </div>
                        <p class="text-muted mb-2"><i class="bi bi-telephone me-2"></i>${address.sdtnguoinhan}</p>
                        <p class="mb-3">
                            <i class="bi bi-geo-alt me-2"></i>
                            ${address.diachicuthe}, ${wardName}, ${districtName}, ${provinceName}
                        </p>
                        <div class="d-flex justify-content-end gap-2">
                            <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" 
                                data-bs-target="#EditAddressModal" onclick="loadEditAddress(${address.id})">
                                <i class="bi bi-pencil"></i> S·ª≠a
                            </button>
                            <button class="btn btn-outline-danger btn-sm" onclick="deleteAddress(${address.id}, ${address.trangthai})">
                                <i class="bi bi-trash"></i> X√≥a
                            </button>
                            ${!isDefault ? `
                            <button class="btn btn-primary btn-sm default-btn" data-id="${address.id}">
                                <i class="bi bi-check-circle"></i> M·∫∑c ƒë·ªãnh
                            </button>` : ''}
                        </div>
                    </div>
                </div>
            </div>
        </div>`;
        }).join("");

        // Th√™m s·ª± ki·ªán cho n√∫t ƒë·∫∑t m·∫∑c ƒë·ªãnh
        document.querySelectorAll(".default-btn").forEach(button => {
            button.addEventListener("click", function () {
                const idDiaChi = this.getAttribute("data-id");
                updateDefaultAddress(idDiaChi);
            });
        });
    }


    // üèôÔ∏è L·∫•y danh s√°ch T·ªânh/Th√†nh ph·ªë
    function getProvinces() {
        fetch(apiProvince, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Token": apiKey
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    selectTinh.innerHTML = `<option value="">Ch·ªçn T·ªânh Th√†nh</option>`;
                    data.data.forEach(province => {
                        selectTinh.innerHTML += `<option value="${province.ProvinceID}">${province.NameExtension[1]}</option>`;
                    });
                }
            })
            .catch(error => console.error("L·ªói l·∫•y danh s√°ch t·ªânh:", error));
    }

    // üè¢ L·∫•y danh s√°ch Qu·∫≠n/Huy·ªán theo T·ªânh ƒë√£ ch·ªçn
    selectTinh.addEventListener("change", function () {
        const provinceId = this.value;

        // üîπ Reset d·ªØ li·ªáu Qu·∫≠n & Ph∆∞·ªùng khi ch·ªçn t·ªânh m·ªõi
        selectQuan.innerHTML = `<option selected value="">Ch·ªçn Qu·∫≠n/Huy·ªán</option>`;
        selectPhuong.innerHTML = `<option selected value="">Ch·ªçn Ph∆∞·ªùng X√£</option>`;

        if (!provinceId) return; // ‚õî N·∫øu kh√¥ng c√≥ t·ªânh th√¨ kh√¥ng g·ª≠i request

        fetch(apiDistrict, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Token": apiKey
            },
            body: JSON.stringify({ province_id: Number(provinceId) }) // üîπ Chuy·ªÉn province_id v·ªÅ ki·ªÉu s·ªë
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    data.data.forEach(district => {
                        selectQuan.innerHTML += `<option value="${district.DistrictID}">${district.DistrictName}</option>`;
                    });
                } else {
                    console.error("‚ùå L·ªói t·ª´ API:", data);
                }
            })
            .catch(error => console.error("‚ùå L·ªói k·∫øt n·ªëi:", error));
    });

    // üè† L·∫•y danh s√°ch Ph∆∞·ªùng/X√£ theo Qu·∫≠n/Huy·ªán ƒë√£ ch·ªçn
    selectQuan.addEventListener("change", function () {
        const districtId = this.value;
        if (!districtId) return;

        // üîπ Reset d·ªØ li·ªáu Ph∆∞·ªùng khi ch·ªçn Qu·∫≠n m·ªõi
        selectPhuong.innerHTML = `<option selected value="">Ch·ªçn Ph∆∞·ªùng X√£</option>`;

        fetch(apiWard, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Token": apiKey
            },
            body: JSON.stringify({ district_id: Number(districtId) }) // üîπ Chuy·ªÉn v·ªÅ ki·ªÉu s·ªë
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    data.data.forEach(ward => {
                        selectPhuong.innerHTML += `<option value="${ward.WardCode}">${ward.WardName}</option>`;
                    });
                } else {
                    console.error("‚ùå L·ªói API:", data);
                }
            })
            .catch(error => console.error("‚ùå L·ªói k·∫øt n·ªëi:", error));
    });

    document.getElementById("btnSaveAddress").addEventListener("click", async () => {
        const ten = document.getElementById("tennguoinhan").value.trim();
        const sdt = document.getElementById("sdtnguoinhan").value.trim();
        const provinceElement = document.getElementById("selectTinh");
        const districtElement = document.getElementById("selectQuan");
        const wardElement = document.getElementById("selectPhuong");
        const diachicuthe = document.getElementById("detailInput").value.trim();
        const idkh = GetByidKH();

        const thanhphocheck = provinceElement.value;
        const quanhuyencheck = districtElement.value;
        const phuongxacheck = wardElement.value;

        if (!ten) {
            Swal.fire("L·ªói", "T√™n ng∆∞·ªùi nh·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "error");
            return;
        }

        if (!sdt) {
            Swal.fire("L·ªói", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "error");
            return;
        }

        const phoneRegex = /^[0-9]{10}$/;
        if (!phoneRegex.test(sdt)) {
            Swal.fire("L·ªói", "S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm ƒë√∫ng 10 s·ªë v√† kh√¥ng ch·ª©a k√Ω t·ª± kh√°c!", "error");
            return;
        }

        if (!thanhphocheck) {
            Swal.fire("L·ªói", "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë!", "error");
            return;
        }

        if (!quanhuyencheck && !districtElement.disabled) {
            Swal.fire("L·ªói", "Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán!", "error");
            return;
        }

        if (!phuongxacheck && !wardElement.disabled) {
            Swal.fire("L·ªói", "Vui l√≤ng ch·ªçn ph∆∞·ªùng/x√£!", "error");
            return;
        }

        if (!diachicuthe) {
            Swal.fire("L·ªói", "ƒê·ªãa ch·ªâ c·ª• th·ªÉ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "error");
            return;
        }

        if (!idkh) {
            Swal.fire("L·ªói", "Kh√¥ng t√¨m th·∫•y ID kh√°ch h√†ng!", "error");
            return;
        }

        let addressList = [];
        try {
            const response = await fetch(`${apiAddressList}/khachhang/${idkh}`);
            if (!response.ok) {
                Swal.fire("L·ªói", "Kh√¥ng th·ªÉ ki·ªÉm tra danh s√°ch ƒë·ªãa ch·ªâ. Vui l√≤ng th·ª≠ l·∫°i sau!", "error");
                return;
            }

            addressList = await response.json();
            if (addressList.length >= 5) {
                Swal.fire("L·ªói", "Kh√°ch h√†ng n√†y ƒë√£ c√≥ qu√° 5 ƒë·ªãa ch·ªâ. Kh√¥ng th·ªÉ th√™m m·ªõi!", "error");
                return;
            }
        } catch (error) {
            console.error("L·ªói khi ki·ªÉm tra danh s√°ch ƒë·ªãa ch·ªâ:", error);
            Swal.fire("L·ªói", "ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra danh s√°ch ƒë·ªãa ch·ªâ.", "error");
            return;
        }

        const newAddress = {
            id: 0,
            idkh: idkh,
            tennguoinhan: ten,
            sdtnguoinhan: sdt,
            thanhpho: thanhphocheck,
            quanhuyen: quanhuyencheck,
            phuongxa: phuongxacheck,
            diachicuthe: diachicuthe,
            trangthai: addressList.length === 0 ? "0" : "1"
        };

        try {
            await axios.post(apiAddressList, newAddress);
            Swal.fire("Th√†nh c√¥ng", "ƒê·ªãa ch·ªâ m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u.", "success")
                .then(() => location.reload());
        } catch (error) {
            Swal.fire("L·ªói", "Kh√¥ng th·ªÉ l∆∞u ƒë·ªãa ch·ªâ m·ªõi.", "error");
            console.error(error);
        }
    });


    function updateDefaultAddress(idDiaChi) {
        const idDiaChiInt = parseInt(idDiaChi, 10); // Chuy·ªÉn th√†nh s·ªë nguy√™n
        const idKhachHangInt = parseInt(idkh, 10); // Chuy·ªÉn id kh√°ch h√†ng th√†nh s·ªë nguy√™n

        Swal.fire({
            title: "X√°c nh·∫≠n c·∫≠p nh·∫≠t",
            text: "B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·∫∑t ƒë·ªãa ch·ªâ n√†y l√†m m·∫∑c ƒë·ªãnh kh√¥ng?",
            icon: "question",
            showCancelButton: true,
            confirmButtonText: "C√≥, c·∫≠p nh·∫≠t!",
            cancelButtonText: "H·ªßy"
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`https://localhost:7196/api/Diachi/update-default-address?idDiaChi=${idDiaChiInt}&idKhachHang=${idKhachHangInt}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh th·∫•t b·∫°i!");
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire({
                            title: "Th√†nh c√¥ng!",
                            text: "ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!",
                            icon: "success",
                            confirmButtonText: "OK"
                        }).then(() => {
                            loadAddressData(); // Load l·∫°i danh s√°ch ƒë·ªãa ch·ªâ sau khi c·∫≠p nh·∫≠t
                        });
                    })
                    .catch(error => {
                        console.error("L·ªói:", error);
                        Swal.fire("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i!", "error");
                    });
            }
        });
    }

    // H√†m t·∫£i d·ªØ li·ªáu ƒë·ªãa ch·ªâ ƒë·ªÉ ch·ªânh s·ª≠a
    window.loadEditAddress = async function (id) {
        try {
            const updatetennguoidung = document.getElementById("updatetennguoinhan");
            const updatesdtnguoidung = document.getElementById("updatesdtnguoinhan");
            const updatediachinguoidung = document.getElementById("updatedetailInput");
            const updateCondition = document.getElementById("updateCondition");
            const updateAddressId = document.getElementById("updateAddressId");

            const response = await fetch(`${apiAddressList}/${id}`);
            const data = await response.json();

            if (data) {
                $scope.$apply(() => {
                    $scope.edit = {
                        id: data.id,
                        diachi: data.diachicuthe,
                        thanhpho: data.thanhpho,
                        quanhuyen: data.quanhuyen,
                        phuongxa: data.phuongxa
                    };
                });

                console.log("data ƒë·ªãa ch·ªâ c·∫≠p nh·∫≠t", $scope.edit);

                // üîπ Chuy·ªÉn tr·∫°ng th√°i th√†nh s·ªë nguy√™n
                let trangthai = parseInt(data.trangthai, 10);

                // üîπ Hi·ªÉn th·ªã d·ªØ li·ªáu trong input
                updateAddressId.value = data.id
                updateCondition.value = trangthai;
                updatetennguoidung.value = data.tennguoinhan;
                updatesdtnguoidung.value = data.sdtnguoinhan;
                updatediachinguoidung.value = data.diachicuthe;

                getProvincesupdate(data.thanhpho);
                getDistrictsUpdate(data.thanhpho, data.quanhuyen);
                getWardsUpdate(data.quanhuyen, data.phuongxa);
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i ƒë·ªãa ch·ªâ:", error);
        }
    };


    // üèôÔ∏è L·∫•y danh s√°ch T·ªânh/Th√†nh ph·ªë
    function getProvincesupdate(iddiachi) {
        fetch(apiProvince, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Token": apiKey
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    let options = `<option value="">Ch·ªçn T·ªânh Th√†nh</option>`;

                    // Ki·ªÉm tra n·∫øu iddiachi t·ªìn t·∫°i trong danh s√°ch
                    let selectedProvince = data.data.find(province => province.ProvinceID == iddiachi);

                    // N·∫øu t√¨m th·∫•y t·ªânh c√≥ iddiachi, hi·ªÉn th·ªã n√≥ ƒë·∫ßu ti√™n
                    if (selectedProvince) {
                        options += `<option value="${selectedProvince.ProvinceID}" selected>${selectedProvince.NameExtension[1]}</option>`;
                    }

                    // Hi·ªÉn th·ªã c√°c t·ªânh c√≤n l·∫°i (kh√¥ng tr√πng v·ªõi iddiachi)
                    data.data.forEach(province => {
                        if (province.ProvinceID != iddiachi) {
                            options += `<option value="${province.ProvinceID}">${province.NameExtension[1]}</option>`;
                        }
                    });

                    // G√°n v√†o ph·∫ßn t·ª≠ HTML
                    updateTinh.innerHTML = options;
                }
            })
            .catch(error => console.error("L·ªói l·∫•y danh s√°ch t·ªânh:", error));
    }

    function getDistrictsUpdate(idthanhpho, idquanhuyen) {
        fetch(apiDistrict, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Token": apiKey
            },
            body: JSON.stringify({ province_id: Number(idthanhpho) }) // üîπ Chuy·ªÉn province_id v·ªÅ ki·ªÉu s·ªë
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    let options = `<option value="">Ch·ªçn Qu·∫≠n/Huy·ªán</option>`;

                    // üîç T√¨m qu·∫≠n/huy·ªán c√≥ idquanhuyen
                    let selectedDistrict = data.data.find(district => district.DistrictID == idquanhuyen);

                    // N·∫øu t√¨m th·∫•y, th√™m v√†o danh s√°ch ƒë·∫ßu ti√™n v·ªõi tr·∫°ng th√°i selected
                    if (selectedDistrict) {
                        options += `<option value="${selectedDistrict.DistrictID}" selected>${selectedDistrict.DistrictName}</option>`;
                    }

                    // Th√™m c√°c qu·∫≠n/huy·ªán c√≤n l·∫°i (lo·∫°i b·ªè idquanhuyen n·∫øu ƒë√£ ch·ªçn ·ªü tr√™n)
                    data.data.forEach(district => {
                        if (district.DistrictID != idquanhuyen) {
                            options += `<option value="${district.DistrictID}">${district.DistrictName}</option>`;
                        }
                    });

                    // G√°n v√†o ph·∫ßn t·ª≠ select
                    updateQuan.innerHTML = options;
                } else {
                    console.error("‚ùå L·ªói t·ª´ API:", data);
                }
            })
            .catch(error => console.error("‚ùå L·ªói k·∫øt n·ªëi:", error));
    }

    async function getWardsUpdate(idquanhuyen, idphuongxa) {
        try {
            const response = await fetch(apiWard, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": apiKey
                },
                body: JSON.stringify({ district_id: Number(idquanhuyen) }) // üîπ Chuy·ªÉn district_id v·ªÅ ki·ªÉu s·ªë
            });

            const data = await response.json();
            console.log("üì° Ph·∫£n h·ªìi t·ª´ API Ph∆∞·ªùng/X√£:", data);

            if (data.code === 200 && data.data.length > 0) {
                let options = `<option value="">Ch·ªçn Ph∆∞·ªùng/X√£</option>`;

                // üîç T√¨m ph∆∞·ªùng/x√£ c√≥ idphuongxa
                let selectedWard = data.data.find(ward => ward.WardCode == idphuongxa);

                // N·∫øu t√¨m th·∫•y, th√™m v√†o ƒë·∫ßu danh s√°ch v·ªõi tr·∫°ng th√°i selected
                if (selectedWard) {
                    options += `<option value="${selectedWard.WardCode}" selected>${selectedWard.WardName}</option>`;
                }

                // Th√™m c√°c ph∆∞·ªùng/x√£ c√≤n l·∫°i (lo·∫°i b·ªè idphuongxa n·∫øu ƒë√£ ch·ªçn ·ªü tr√™n)
                data.data.forEach(ward => {
                    if (ward.WardCode != idphuongxa) {
                        options += `<option value="${ward.WardCode}">${ward.WardName}</option>`;
                    }
                });

                // G√°n v√†o ph·∫ßn t·ª≠ select
                updatePhuong.innerHTML = options;
            } else {
                console.error("‚ùå API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá:", data);
            }
        } catch (error) {
            console.error("‚ùå L·ªói k·∫øt n·ªëi API:", error);
        }
    }

    // üè¢ L·∫•y danh s√°ch Qu·∫≠n/Huy·ªán theo T·ªânh ƒë√£ ch·ªçn
    updateTinh.addEventListener("change", function () {
        const provinceId = this.value;

        // üîπ Reset d·ªØ li·ªáu Qu·∫≠n & Ph∆∞·ªùng khi ch·ªçn t·ªânh m·ªõi
        updateQuan.innerHTML = `<option selected value="">Ch·ªçn Qu·∫≠n/Huy·ªán</option>`;
        updatePhuong.innerHTML = `<option selected value="">Ch·ªçn Ph∆∞·ªùng X√£</option>`;

        if (!provinceId) return; // ‚õî N·∫øu kh√¥ng c√≥ t·ªânh th√¨ kh√¥ng g·ª≠i request

        fetch(apiDistrict, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Token": apiKey
            },
            body: JSON.stringify({ province_id: Number(provinceId) }) // üîπ Chuy·ªÉn province_id v·ªÅ ki·ªÉu s·ªë
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    data.data.forEach(district => {
                        updateQuan.innerHTML += `<option value="${district.DistrictID}">${district.DistrictName}</option>`;
                    });
                } else {
                    console.error("‚ùå L·ªói t·ª´ API:", data);
                }
            })
            .catch(error => console.error("‚ùå L·ªói k·∫øt n·ªëi:", error));
    });

    // üè† L·∫•y danh s√°ch Ph∆∞·ªùng/X√£ theo Qu·∫≠n/Huy·ªán ƒë√£ ch·ªçn
    updateQuan.addEventListener("change", function () {
        const districtId = this.value;
        if (!districtId) return;

        // üîπ Reset d·ªØ li·ªáu Ph∆∞·ªùng khi ch·ªçn Qu·∫≠n m·ªõi
        updatePhuong.innerHTML = `<option selected value="">Ch·ªçn Ph∆∞·ªùng X√£</option>`;

        fetch(apiWard, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Token": apiKey
            },
            body: JSON.stringify({ district_id: Number(districtId) }) // üîπ Chuy·ªÉn v·ªÅ ki·ªÉu s·ªë
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    data.data.forEach(ward => {
                        updatePhuong.innerHTML += `<option value="${ward.WardCode}">${ward.WardName}</option>`;
                    });
                } else {
                    console.error("‚ùå L·ªói API:", data);
                }
            })
            .catch(error => console.error("‚ùå L·ªói k·∫øt n·ªëi:", error));
    });

    document.getElementById("updateForm").addEventListener("click", function (event) {
        const updatetennguoidung = document.getElementById("updatetennguoinhan").value.trim();
        const updatesdtnguoidung = document.getElementById("updatesdtnguoinhan").value.trim();
        const updatediachinguoidung = document.getElementById("updatedetailInput").value.trim();
        const updateCondition = document.getElementById("updateCondition").value;
        const updateAddressId = document.getElementById("updateAddressId").value;

        // L·∫•y gi√° tr·ªã t·ªânh, qu·∫≠n, ph∆∞·ªùng
        const updateTinh1 = document.getElementById("updateTinh")?.value || "";
        const updateQuan1 = document.getElementById("updateQuan")?.value || "";
        const updatePhuong1 = document.getElementById("updatePhuong")?.value || "";

        // üöÄ Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o
        if (!updatetennguoidung) {
            Swal.fire({
                icon: "warning",
                title: "L·ªói!",
                text: "T√™n ng∆∞·ªùi nh·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                confirmButtonText: "OK"
            });
            return;
        }

        if (!updatesdtnguoidung) {
            Swal.fire({
                icon: "warning",
                title: "L·ªói!",
                text: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                confirmButtonText: "OK"
            });
            return;
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i
        const phoneRegex = /^[0-9]{10}$/;
        if (!phoneRegex.test(updatesdtnguoidung)) {
            Swal.fire({
                icon: "error",
                title: "L·ªói!",
                text: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm ƒë√∫ng 10 s·ªë v√† kh√¥ng ch·ª©a k√Ω t·ª± kh√°c!",
                confirmButtonText: "OK"
            });
            return;
        }

        if (!updateTinh1) {
            Swal.fire({
                icon: "warning",
                title: "L·ªói!",
                text: "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë!",
                confirmButtonText: "OK"
            });
            return;
        }

        if (!updateQuan1 && document.getElementById("updateQuan") && !document.getElementById("updateQuan").disabled) {
            Swal.fire({
                icon: "warning",
                title: "L·ªói!",
                text: "Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán!",
                confirmButtonText: "OK"
            });
            return;
        }

        if (!updatePhuong1 && document.getElementById("updatePhuong") && !document.getElementById("updatePhuong").disabled) {
            Swal.fire({
                icon: "warning",
                title: "L·ªói!",
                text: "Vui l√≤ng ch·ªçn ph∆∞·ªùng/x√£!",
                confirmButtonText: "OK"
            });
            return;
        }

        if (!updatediachinguoidung) {
            Swal.fire({
                icon: "warning",
                title: "L·ªói!",
                text: "ƒê·ªãa ch·ªâ c·ª• th·ªÉ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                confirmButtonText: "OK"
            });
            return;
        }

        const updatedData = {
            id: updateAddressId,
            idkh: idkh,
            tennguoinhan: updatetennguoidung,
            sdtnguoinhan: updatesdtnguoidung,
            thanhpho: updateTinh1,
            quanhuyen: updateQuan1,
            phuongxa: updatePhuong1,
            diachicuthe: updatediachinguoidung,
            trangthai: updateCondition
        };

        // üîÑ G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t
        $http.put(`${apiAddressList}/${updateAddressId}`, updatedData)
            .then(response => {
                Swal.fire({
                    icon: "success",
                    title: "Th√†nh c√¥ng!",
                    text: "C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th√†nh c√¥ng!",
                    confirmButtonText: "OK"
                }).then(() => {
                    $("#EditAddressModal").modal("hide"); // ·∫®n modal sau khi c·∫≠p nh·∫≠t
                    loadAddressData(); // Load l·∫°i danh s√°ch ƒë·ªãa ch·ªâ
                });
            })
            .catch(error => {
                console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ:", error);
                Swal.fire({
                    icon: "error",
                    title: "L·ªói!",
                    text: "C·∫≠p nh·∫≠t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.",
                    confirmButtonText: "OK"
                });
            });
    });

    // H√†m x√≥a ƒë·ªãa ch·ªâ
    window.deleteAddress = function (id, trangthai) {
        console.log("ID:", id, "Tr·∫°ng th√°i:", trangthai); // ‚úÖ Ki·ªÉm tra ƒë·∫ßu v√†o

        if (trangthai == 0) {
            Swal.fire({
                icon: "warning",
                title: "Kh√¥ng th·ªÉ x√≥a",
                text: "ƒê·ªãa ch·ªâ hi·ªán t·∫°i ƒëang l√† ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh, vui l√≤ng thay ƒë·ªïi ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh tr∆∞·ªõc khi x√≥a.",
                confirmButtonText: "OK"
            });
            return;
        }

        Swal.fire({
            title: "X√°c nh·∫≠n x√≥a?",
            text: "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë·ªãa ch·ªâ n√†y kh√¥ng?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "X√≥a",
            cancelButtonText: "H·ªßy"
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`${apiAddressList}/${id}`, {
                    method: "DELETE"
                })
                    .then(response => {
                        if (response.ok) {
                            Swal.fire({
                                icon: "success",
                                title: "Th√†nh c√¥ng",
                                text: "X√≥a ƒë·ªãa ch·ªâ th√†nh c√¥ng!",
                                confirmButtonText: "OK"
                            }).then(() => {
                                location.reload(); // ‚úÖ Reload sau khi x√≥a
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: "L·ªói",
                                text: "X√≥a th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.",
                                confirmButtonText: "OK"
                            });
                        }
                    })
                    .catch(error => {
                        console.error("‚ùå L·ªói khi x√≥a ƒë·ªãa ch·ªâ:", error);
                        Swal.fire({
                            icon: "error",
                            title: "L·ªói",
                            text: "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.",
                            confirmButtonText: "OK"
                        });
                    });
            }
        });
    };

    loadAddressData();
    // G·ªçi API l·∫•y danh s√°ch t·ªânh khi trang load
    getProvinces();
    $http.get("https://localhost:7196/api/Khachhangs/" + idkh)
        .then(function (response) {
            $scope.dataTttk = response.data;
            console.log("D·ªØ li·ªáu t√†i kho·∫£n:", $scope.dataTttk);
        })
        .catch(function (error) {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
            Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i!", "error");
        });
});
